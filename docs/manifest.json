{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.4", "generated_at": "2022-04-04T13:59:49.488285Z", "invocation_id": "cd337e8c-7562-4ea1-a984-9fb3a454bc80", "env": {}, "project_id": "d9b3c2176db98e2e717cbb6a2ee41ffd", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "postgres"}, "nodes": {"model.dbt_expectations_integration_tests.data_test": {"raw_sql": "select\n    1 as idx,\n    '2020-10-21' as date_col,\n    cast(0 as {{ dbt_utils.type_float() }}) as col_numeric_a,\n    cast(1 as {{ dbt_utils.type_float() }}) as col_numeric_b,\n    'a' as col_string_a,\n    'b' as col_string_b,\n    cast(null as {{ dbt_utils.type_string() }}) as col_null\n\nunion all\n\nselect\n    2 as idx,\n    '2020-10-22' as date_col,\n    1 as col_numeric_a,\n    0 as col_numeric_b,\n    'b' as col_string_a,\n    'ab' as col_string_b,\n    null as col_null\n\nunion all\n\nselect\n    3 as idx,\n    '2020-10-23' as date_col,\n    0.5 as col_numeric_a,\n    0.5 as col_numeric_b,\n    'c' as col_string_a,\n    'abc' as col_string_b,\n    null as col_null\n\nunion all\n\nselect\n    4 as idx,\n    '2020-10-23' as date_col,\n    0.5 as col_numeric_a,\n    0.5 as col_numeric_b,\n    'c' as col_string_a,\n    'abcd' as col_string_b,\n    null as col_null", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_float", "macro.dbt_utils.type_string"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_expectations_integration_tests", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "dbt_expectations_integration_tests", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "data_test"], "unique_id": "model.dbt_expectations_integration_tests.data_test", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "schema_tests/data_test.sql", "original_file_path": "models/schema_tests/data_test.sql", "name": "data_test", "alias": "data_test", "checksum": {"name": "sha256", "checksum": "b508c1bdbb742d4379f28557c7e8bbd5f95b751c8a654a1b12b91ce2436923ba"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {"idx": {"name": "idx", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "col_numeric_a": {"name": "col_numeric_a", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "col_string_a": {"name": "col_string_a", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "col_string_b": {"name": "col_string_b", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "col_null": {"name": "col_null", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_expectations_integration_tests://models/schema_tests/schema.yml", "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/data_test.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_expectations_integration_tests", "materialized": "table"}, "created_at": 1649080791.148748, "compiled_sql": "select\n    1 as idx,\n    '2020-10-21' as date_col,\n    cast(0 as \n    float\n) as col_numeric_a,\n    cast(1 as \n    float\n) as col_numeric_b,\n    'a' as col_string_a,\n    'b' as col_string_b,\n    cast(null as \n    varchar\n) as col_null\n\nunion all\n\nselect\n    2 as idx,\n    '2020-10-22' as date_col,\n    1 as col_numeric_a,\n    0 as col_numeric_b,\n    'b' as col_string_a,\n    'ab' as col_string_b,\n    null as col_null\n\nunion all\n\nselect\n    3 as idx,\n    '2020-10-23' as date_col,\n    0.5 as col_numeric_a,\n    0.5 as col_numeric_b,\n    'c' as col_string_a,\n    'abc' as col_string_b,\n    null as col_null\n\nunion all\n\nselect\n    4 as idx,\n    '2020-10-23' as date_col,\n    0.5 as col_numeric_a,\n    0.5 as col_numeric_b,\n    'c' as col_string_a,\n    'abcd' as col_string_b,\n    null as col_null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "postgres.dbt_expectations_integration_tests.data_test"}, "model.dbt_expectations_integration_tests.series_4": {"raw_sql": "{{ dbt_utils.generate_series(upper_bound=4) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.generate_series"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_expectations_integration_tests", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "dbt_expectations_integration_tests", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "series_4"], "unique_id": "model.dbt_expectations_integration_tests.series_4", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "schema_tests/series_4.sql", "original_file_path": "models/schema_tests/series_4.sql", "name": "series_4", "alias": "series_4", "checksum": {"name": "sha256", "checksum": "3c3640a2418d29caf1b1ea4a806cdd7f303b34714217c17d1b113f10f0f20d82"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/series_4.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_expectations_integration_tests", "materialized": "table"}, "created_at": 1649080790.94089, "compiled_sql": "\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 4\n    order by generated_number\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "postgres.dbt_expectations_integration_tests.series_4"}, "model.dbt_expectations_integration_tests.timeseries_data_grouped": {"raw_sql": "with dates as (\n    select * from {{ ref('timeseries_base') }}\n),\ngroupings as (\n    select * from {{ ref('series_4') }}\n),\nrow_values as (\n    select * from {{ ref('series_10') }}\n),\nadd_row_values as (\n\n    select\n        cast(d.date_day as {{ dbt_expectations.type_datetime() }}) as date_day,\n        cast(g.generated_number as {{ dbt_utils.type_int() }}) as group_id,\n        cast(floor(100 * r.generated_number) as {{ dbt_utils.type_int() }}) as row_value\n    from\n        dates d\n        cross join\n        groupings g\n        cross join\n        row_values r\n\n),\nadd_logs as (\n\n    select\n        *,\n        {{ dbt_expectations.log_natural('nullif(row_value, 0)') }} as row_value_log\n    from\n        add_row_values\n)\nselect\n    *\nfrom\n    add_logs", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_expectations.type_datetime", "macro.dbt_utils.type_int", "macro.dbt_expectations.log_natural"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_base", "model.dbt_expectations_integration_tests.series_4", "model.dbt_expectations_integration_tests.series_10"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_expectations_integration_tests", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "dbt_expectations_integration_tests", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "timeseries_data_grouped"], "unique_id": "model.dbt_expectations_integration_tests.timeseries_data_grouped", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "schema_tests/timeseries_data_grouped.sql", "original_file_path": "models/schema_tests/timeseries_data_grouped.sql", "name": "timeseries_data_grouped", "alias": "timeseries_data_grouped", "checksum": {"name": "sha256", "checksum": "66f2b103bb5fffb976116f0991e2ced1999fb8fe2c73934075f847ec985ceb38"}, "tags": [], "refs": [["timeseries_base"], ["series_4"], ["series_10"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_expectations_integration_tests://models/schema_tests/schema.yml", "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/timeseries_data_grouped.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_expectations_integration_tests", "materialized": "table"}, "created_at": 1649080791.149992, "compiled_sql": "with dates as (\n    select * from postgres.dbt_expectations_integration_tests.timeseries_base\n),\ngroupings as (\n    select * from postgres.dbt_expectations_integration_tests.series_4\n),\nrow_values as (\n    select * from postgres.dbt_expectations_integration_tests.series_10\n),\nadd_row_values as (\n\n    select\n        cast(d.date_day as timestamp without time zone) as date_day,\n        cast(g.generated_number as \n    int\n) as group_id,\n        cast(floor(100 * r.generated_number) as \n    int\n) as row_value\n    from\n        dates d\n        cross join\n        groupings g\n        cross join\n        row_values r\n\n),\nadd_logs as (\n\n    select\n        *,\n        \n\n    ln(nullif(row_value, 0))\n as row_value_log\n    from\n        add_row_values\n)\nselect\n    *\nfrom\n    add_logs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "postgres.dbt_expectations_integration_tests.timeseries_data_grouped"}, "model.dbt_expectations_integration_tests.timeseries_hourly": {"raw_sql": "{{ dbt_utils.date_spine('hour',\n    start_date=dbt_date.n_days_ago(10),\n    end_date=dbt_date.tomorrow()\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_date.n_days_ago", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_expectations_integration_tests", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "dbt_expectations_integration_tests", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "timeseries_hourly"], "unique_id": "model.dbt_expectations_integration_tests.timeseries_hourly", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "schema_tests/timeseries_hourly.sql", "original_file_path": "models/schema_tests/timeseries_hourly.sql", "name": "timeseries_hourly", "alias": "timeseries_hourly", "checksum": {"name": "sha256", "checksum": "e6ca8e21fdea8b2541070d3c552d9303720dd16eae98ddbe1eb9098293ee89ff"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/timeseries_hourly.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_expectations_integration_tests", "materialized": "table"}, "created_at": 1649080791.001533, "compiled_sql": "\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 264.0\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast(\n\n    cast(cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone) as date) + ((interval '1 day') * (-10))\n\n as date) + ((interval '1 hour') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_hour\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_hour <= cast(\n\n    cast(cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone) as date) + ((interval '1 day') * (1))\n\n as date)\n\n)\n\nselect * from filtered\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "postgres.dbt_expectations_integration_tests.timeseries_hourly"}, "model.dbt_expectations_integration_tests.timeseries_base": {"raw_sql": "{{ dbt_date.get_base_dates(n_dateparts=366, datepart='day') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_date.get_base_dates"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_expectations_integration_tests", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "dbt_expectations_integration_tests", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "timeseries_base"], "unique_id": "model.dbt_expectations_integration_tests.timeseries_base", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "schema_tests/timeseries_base.sql", "original_file_path": "models/schema_tests/timeseries_base.sql", "name": "timeseries_base", "alias": "timeseries_base", "checksum": {"name": "sha256", "checksum": "30c069ae8cdf9621fcf3604fccba528dd9f7dc34de11a173c08d0534327a9033"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/timeseries_base.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_expectations_integration_tests", "materialized": "table"}, "created_at": 1649080791.045013, "compiled_sql": "\n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 367\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    \n\n    cast(cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone) as date) + ((interval '1 day') * (-366))\n\n + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast(\n\n    cast(cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone) as date) + ((interval '1 day') * (1))\n\n as date)\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as timestamp without time zone) as date_day\nfrom\n    date_spine d\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "postgres.dbt_expectations_integration_tests.timeseries_base"}, "model.dbt_expectations_integration_tests.timeseries_data": {"raw_sql": "with dates as (\n\n    select * from {{ ref('timeseries_base') }}\n\n),\nadd_row_values as (\n\n    select\n        d.date_day,\n        cast(d.date_day as {{ dbt_expectations.type_datetime() }}) as date_datetime,\n        cast(d.date_day as {{ dbt_utils.type_timestamp() }}) as date_timestamp,\n        cast(abs({{ dbt_expectations.rand() }}) as {{ dbt_utils.type_float() }}) as row_value\n    from\n        dates d\n\n),\nadd_logs as (\n\n    select\n        *,\n        {{ dbt_expectations.log_natural('nullif(row_value, 0)') }} as row_value_log\n    from\n        add_row_values\n)\nselect\n    *\nfrom\n    add_logs", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_expectations.type_datetime", "macro.dbt_utils.type_timestamp", "macro.dbt_expectations.rand", "macro.dbt_utils.type_float", "macro.dbt_expectations.log_natural"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_base"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_expectations_integration_tests", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "dbt_expectations_integration_tests", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "timeseries_data"], "unique_id": "model.dbt_expectations_integration_tests.timeseries_data", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "schema_tests/timeseries_data.sql", "original_file_path": "models/schema_tests/timeseries_data.sql", "name": "timeseries_data", "alias": "timeseries_data", "checksum": {"name": "sha256", "checksum": "c8aaade65fc97cdc59feca058721b850c5870395ff2db74046ef6974a52ba8bd"}, "tags": [], "refs": [["timeseries_base"]], "sources": [], "description": "", "columns": {"date_day": {"name": "date_day", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_datetime": {"name": "date_datetime", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_timestamp": {"name": "date_timestamp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "row_value": {"name": "row_value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_expectations_integration_tests://models/schema_tests/schema.yml", "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/timeseries_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_expectations_integration_tests", "materialized": "table"}, "created_at": 1649080791.140629, "compiled_sql": "with dates as (\n\n    select * from postgres.dbt_expectations_integration_tests.timeseries_base\n\n),\nadd_row_values as (\n\n    select\n        d.date_day,\n        cast(d.date_day as timestamp without time zone) as date_datetime,\n        cast(d.date_day as timestamp without time zone) as date_timestamp,\n        cast(abs(\n\n    random()\n) as \n    float\n) as row_value\n    from\n        dates d\n\n),\nadd_logs as (\n\n    select\n        *,\n        \n\n    ln(nullif(row_value, 0))\n as row_value_log\n    from\n        add_row_values\n)\nselect\n    *\nfrom\n    add_logs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "postgres.dbt_expectations_integration_tests.timeseries_data"}, "model.dbt_expectations_integration_tests.window_function_test": {"raw_sql": "with data_example as (\n\n    select\n        1 as idx,\n        '2020-10-21' as date_col,\n        cast(0 as {{ dbt_utils.type_float() }}) as col_numeric_a\n\n    union all\n\n    select\n        2 as idx,\n        '2020-10-22' as date_col,\n        1 as col_numeric_a\n\n    union all\n\n    select\n        2 as idx,\n        '2020-10-23' as date_col,\n        2 as col_numeric_a\n\n    union all\n\n    select\n        2 as idx,\n        '2020-10-24' as date_col,\n        1 as col_numeric_a\n\n    union all\n\n    select\n        3 as idx,\n        '2020-10-23' as date_col,\n        0.5 as col_numeric_a\n    union all\n\n    select\n        4 as idx,\n        '2020-10-23' as date_col,\n        0.5 as col_numeric_a\n\n)\nselect\n    *,\n    sum(col_numeric_a) over (partition by idx order by date_col) as rolling_sum_increasing,\n    sum(col_numeric_a) over (partition by idx order by date_col desc) as rolling_sum_decreasing\nfrom\n    data_example", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_float"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_expectations_integration_tests", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "dbt_expectations_integration_tests", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "window_function_test"], "unique_id": "model.dbt_expectations_integration_tests.window_function_test", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "schema_tests/window_function_test.sql", "original_file_path": "models/schema_tests/window_function_test.sql", "name": "window_function_test", "alias": "window_function_test", "checksum": {"name": "sha256", "checksum": "7ba1441e289b93df3aaf6167a22bff4dd703098a7fc6f34fd9568bef79ec7686"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {"rolling_sum_increasing": {"name": "rolling_sum_increasing", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rolling_sum_decreasing": {"name": "rolling_sum_decreasing", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_expectations_integration_tests://models/schema_tests/schema.yml", "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/window_function_test.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_expectations_integration_tests", "materialized": "table"}, "created_at": 1649080791.151233, "compiled_sql": "with data_example as (\n\n    select\n        1 as idx,\n        '2020-10-21' as date_col,\n        cast(0 as \n    float\n) as col_numeric_a\n\n    union all\n\n    select\n        2 as idx,\n        '2020-10-22' as date_col,\n        1 as col_numeric_a\n\n    union all\n\n    select\n        2 as idx,\n        '2020-10-23' as date_col,\n        2 as col_numeric_a\n\n    union all\n\n    select\n        2 as idx,\n        '2020-10-24' as date_col,\n        1 as col_numeric_a\n\n    union all\n\n    select\n        3 as idx,\n        '2020-10-23' as date_col,\n        0.5 as col_numeric_a\n    union all\n\n    select\n        4 as idx,\n        '2020-10-23' as date_col,\n        0.5 as col_numeric_a\n\n)\nselect\n    *,\n    sum(col_numeric_a) over (partition by idx order by date_col) as rolling_sum_increasing,\n    sum(col_numeric_a) over (partition by idx order by date_col desc) as rolling_sum_decreasing\nfrom\n    data_example", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "postgres.dbt_expectations_integration_tests.window_function_test"}, "model.dbt_expectations_integration_tests.emails": {"raw_sql": "select\n    'ab@gmail.com' as email_address,\n    '@[^.]*' as reg_exp\n\nunion all\n\nselect\n    'ab@mail.com' as email_address,\n    '@[^.]*' as reg_exp\n\nunion all\n\nselect\n    'abc@gmail.com' as email_address,\n    '@[^.]*' as reg_exp\n\nunion all\n\nselect\n    'abc.com@gmail.com' as email_address,\n    '@[^.]*' as reg_exp", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_expectations_integration_tests", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "dbt_expectations_integration_tests", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "emails"], "unique_id": "model.dbt_expectations_integration_tests.emails", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "schema_tests/emails.sql", "original_file_path": "models/schema_tests/emails.sql", "name": "emails", "alias": "emails", "checksum": {"name": "sha256", "checksum": "0a7dcbbd9aec1f2556b17ac14aa18f97088f4edf4ffff9bcc03d8533ff78452e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {"email_address": {"name": "email_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_expectations_integration_tests://models/schema_tests/schema.yml", "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/emails.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_expectations_integration_tests", "materialized": "table"}, "created_at": 1649080791.1383522, "compiled_sql": "select\n    'ab@gmail.com' as email_address,\n    '@[^.]*' as reg_exp\n\nunion all\n\nselect\n    'ab@mail.com' as email_address,\n    '@[^.]*' as reg_exp\n\nunion all\n\nselect\n    'abc@gmail.com' as email_address,\n    '@[^.]*' as reg_exp\n\nunion all\n\nselect\n    'abc.com@gmail.com' as email_address,\n    '@[^.]*' as reg_exp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "postgres.dbt_expectations_integration_tests.emails"}, "model.dbt_expectations_integration_tests.series_10": {"raw_sql": "{{ dbt_utils.generate_series(upper_bound=10) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.generate_series"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_expectations_integration_tests", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "dbt_expectations_integration_tests", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "series_10"], "unique_id": "model.dbt_expectations_integration_tests.series_10", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "schema_tests/series_10.sql", "original_file_path": "models/schema_tests/series_10.sql", "name": "series_10", "alias": "series_10", "checksum": {"name": "sha256", "checksum": "e8a34eaf70a78746b59bd12f97c1c88275c86be036a28f9afa42a53f8a049c1b"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/series_10.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_expectations_integration_tests", "materialized": "table"}, "created_at": 1649080791.0757592, "compiled_sql": "\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 10\n    order by generated_number\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "postgres.dbt_expectations_integration_tests.series_10"}, "model.dbt_expectations_integration_tests.timeseries_hourly_data_extended": {"raw_sql": "with dates as (\n\n    select * from {{ ref('timeseries_hourly') }}\n\n),\nrow_values as (\n    select * from {{ ref('series_10') }}\n),\nadd_row_values as (\n\n    select\n        cast(d.date_hour as {{ dbt_expectations.type_datetime() }}) as date_hour,\n        cast(abs({{ dbt_expectations.rand() }}) as {{ dbt_utils.type_float() }}) as row_value\n    from\n        dates d\n        cross join\n        row_values r\n\n),\nadd_logs as (\n\n    select\n        *,\n        {{ dbt_expectations.log_natural('nullif(row_value, 0)') }} as row_value_log\n    from\n        add_row_values\n)\nselect\n    *\nfrom\n    add_logs", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_expectations.type_datetime", "macro.dbt_expectations.rand", "macro.dbt_utils.type_float", "macro.dbt_expectations.log_natural"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_hourly", "model.dbt_expectations_integration_tests.series_10"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_expectations_integration_tests", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "dbt_expectations_integration_tests", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "timeseries_hourly_data_extended"], "unique_id": "model.dbt_expectations_integration_tests.timeseries_hourly_data_extended", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "schema_tests/timeseries_hourly_data_extended.sql", "original_file_path": "models/schema_tests/timeseries_hourly_data_extended.sql", "name": "timeseries_hourly_data_extended", "alias": "timeseries_hourly_data_extended", "checksum": {"name": "sha256", "checksum": "9c60780c00cd700702c1bfd19b6345c4cb89820be505450186fae0620031b2bd"}, "tags": [], "refs": [["timeseries_hourly"], ["series_10"]], "sources": [], "description": "", "columns": {"date_hour": {"name": "date_hour", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "row_value_log": {"name": "row_value_log", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_expectations_integration_tests://models/schema_tests/schema.yml", "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/timeseries_hourly_data_extended.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_expectations_integration_tests", "materialized": "table"}, "created_at": 1649080791.14466, "compiled_sql": "with dates as (\n\n    select * from postgres.dbt_expectations_integration_tests.timeseries_hourly\n\n),\nrow_values as (\n    select * from postgres.dbt_expectations_integration_tests.series_10\n),\nadd_row_values as (\n\n    select\n        cast(d.date_hour as timestamp without time zone) as date_hour,\n        cast(abs(\n\n    random()\n) as \n    float\n) as row_value\n    from\n        dates d\n        cross join\n        row_values r\n\n),\nadd_logs as (\n\n    select\n        *,\n        \n\n    ln(nullif(row_value, 0))\n as row_value_log\n    from\n        add_row_values\n)\nselect\n    *\nfrom\n    add_logs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "postgres.dbt_expectations_integration_tests.timeseries_hourly_data_extended"}, "model.dbt_expectations_integration_tests.data_test_factored": {"raw_sql": "{{ dbt_utils.generate_series(upper_bound=8) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.generate_series"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_expectations_integration_tests", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "dbt_expectations_integration_tests", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "data_test_factored"], "unique_id": "model.dbt_expectations_integration_tests.data_test_factored", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "schema_tests/data_test_factored.sql", "original_file_path": "models/schema_tests/data_test_factored.sql", "name": "data_test_factored", "alias": "data_test_factored", "checksum": {"name": "sha256", "checksum": "788e71c6fbed11e01fd2ea9d3c5cb473542cefdbf45a801424bf93e692b8b1f0"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_expectations_integration_tests://models/schema_tests/schema.yml", "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/data_test_factored.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_expectations_integration_tests", "materialized": "table"}, "created_at": 1649080791.149363, "compiled_sql": "\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 8\n    order by generated_number\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "postgres.dbt_expectations_integration_tests.data_test_factored"}, "model.dbt_expectations_integration_tests.timeseries_data_extended": {"raw_sql": "with dates as (\n\n    select * from {{ ref('timeseries_base') }}\n\n),\nrow_values as (\n    select * from {{ ref('series_10') }}\n),\nadd_row_values as (\n\n    select\n        cast(d.date_day as {{ dbt_expectations.type_datetime() }}) as date_day,\n        cast(abs({{ dbt_expectations.rand() }}) as {{ dbt_utils.type_float() }}) as row_value\n    from\n        dates d\n        cross join\n        row_values r\n\n),\nadd_logs as (\n\n    select\n        *,\n        {{ dbt_expectations.log_natural('nullif(row_value, 0)') }} as row_value_log\n    from\n        add_row_values\n)\nselect\n    *\nfrom\n    add_logs", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_expectations.type_datetime", "macro.dbt_expectations.rand", "macro.dbt_utils.type_float", "macro.dbt_expectations.log_natural"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_base", "model.dbt_expectations_integration_tests.series_10"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_expectations_integration_tests", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "dbt_expectations_integration_tests", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "timeseries_data_extended"], "unique_id": "model.dbt_expectations_integration_tests.timeseries_data_extended", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "schema_tests/timeseries_data_extended.sql", "original_file_path": "models/schema_tests/timeseries_data_extended.sql", "name": "timeseries_data_extended", "alias": "timeseries_data_extended", "checksum": {"name": "sha256", "checksum": "e15b0350dc0add4038a20bbcdc2a9269a98c079220c4ec2169a3fedd86d18596"}, "tags": [], "refs": [["timeseries_base"], ["series_10"]], "sources": [], "description": "", "columns": {"date_day": {"name": "date_day", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "row_value": {"name": "row_value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "row_value_log": {"name": "row_value_log", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_expectations_integration_tests://models/schema_tests/schema.yml", "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/timeseries_data_extended.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_expectations_integration_tests", "materialized": "table"}, "created_at": 1649080791.1425412, "compiled_sql": "with dates as (\n\n    select * from postgres.dbt_expectations_integration_tests.timeseries_base\n\n),\nrow_values as (\n    select * from postgres.dbt_expectations_integration_tests.series_10\n),\nadd_row_values as (\n\n    select\n        cast(d.date_day as timestamp without time zone) as date_day,\n        cast(abs(\n\n    random()\n) as \n    float\n) as row_value\n    from\n        dates d\n        cross join\n        row_values r\n\n),\nadd_logs as (\n\n    select\n        *,\n        \n\n    ln(nullif(row_value, 0))\n as row_value_log\n    from\n        add_row_values\n)\nselect\n    *\nfrom\n    add_logs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "postgres.dbt_expectations_integration_tests.timeseries_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_regex_emails_email_address___.9de7a56999": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2bafb3030a37be5cc212c866e5ed0480\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "@[^.]*", "column_name": "email_address", "model": "{{ get_where_subquery(ref('emails')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.emails"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2bafb3030a37be5cc212c866e5ed0480", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_match_regex_emails_email_address___"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_regex_emails_email_address___.9de7a56999", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_2bafb3030a37be5cc212c866e5ed0480.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_emails_email_address___", "alias": "dbt_expectations_expect_column_2bafb3030a37be5cc212c866e5ed0480", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["emails"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_2bafb3030a37be5cc212c866e5ed0480.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2bafb3030a37be5cc212c866e5ed0480"}, "created_at": 1649080791.158848, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \narray_length((select regexp_matches(email_address, '@[^.]*')), 1)\n\n\n > 0\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.emails\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_address", "file_key_name": "models.emails"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_regex_emails_email_address___.ff3a15060f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_not_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4b7e09b3a33bb51166bd757f627d9b5d\") }}", "test_metadata": {"name": "expect_column_values_to_not_match_regex", "kwargs": {"regex": "&[^.]*", "column_name": "email_address", "model": "{{ get_where_subquery(ref('emails')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.emails"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4b7e09b3a33bb51166bd757f627d9b5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_not_match_regex_emails_email_address___"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_regex_emails_email_address___.ff3a15060f", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_4b7e09b3a33bb51166bd757f627d9b5d.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_not_match_regex_emails_email_address___", "alias": "dbt_expectations_expect_column_4b7e09b3a33bb51166bd757f627d9b5d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["emails"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_4b7e09b3a33bb51166bd757f627d9b5d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4b7e09b3a33bb51166bd757f627d9b5d"}, "created_at": 1649080791.179174, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \narray_length((select regexp_matches(email_address, '&[^.]*')), 1)\n\n\n = 0\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.emails\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_address", "file_key_name": "models.emails"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_regex_list_emails_email_address______.959ffbd98d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_be3692144f49c49868927f871016d3fd\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex_list", "kwargs": {"regex_list": ["@[^.]*", "&[^.]*"], "column_name": "email_address", "model": "{{ get_where_subquery(ref('emails')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.emails"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_be3692144f49c49868927f871016d3fd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_match_regex_list_emails_email_address______"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_regex_list_emails_email_address______.959ffbd98d", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_be3692144f49c49868927f871016d3fd.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_list_emails_email_address______", "alias": "dbt_expectations_expect_column_be3692144f49c49868927f871016d3fd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["emails"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_be3692144f49c49868927f871016d3fd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_be3692144f49c49868927f871016d3fd"}, "created_at": 1649080791.185843, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    \n\n    \narray_length((select regexp_matches(email_address, '@[^.]*')), 1)\n\n\n > 0\n     or \n    \n    \n\n    \narray_length((select regexp_matches(email_address, '&[^.]*')), 1)\n\n\n > 0\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.emails\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_address", "file_key_name": "models.emails"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_regex_list_emails_email_address______.8bac11c2c5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_not_match_regex_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e2cc086be2c9b850d8617b27897508ff\") }}", "test_metadata": {"name": "expect_column_values_to_not_match_regex_list", "kwargs": {"regex_list": ["@[^.]*", "&[^.]*"], "column_name": "email_address", "model": "{{ get_where_subquery(ref('emails')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.emails"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e2cc086be2c9b850d8617b27897508ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_not_match_regex_list_emails_email_address______"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_regex_list_emails_email_address______.8bac11c2c5", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_e2cc086be2c9b850d8617b27897508ff.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_not_match_regex_list_emails_email_address______", "alias": "dbt_expectations_expect_column_e2cc086be2c9b850d8617b27897508ff", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["emails"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_e2cc086be2c9b850d8617b27897508ff.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e2cc086be2c9b850d8617b27897508ff"}, "created_at": 1649080791.194467, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n\n    \narray_length((select regexp_matches(email_address, '@[^.]*')), 1)\n\n\n = 0\n or \n\n\n\n    \narray_length((select regexp_matches(email_address, '&[^.]*')), 1)\n\n\n = 0\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.emails\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_address", "file_key_name": "models.emails"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_like_pattern_emails_email_address___.08c0c874a1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_like_pattern(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_66c2f74a45dedfb6a0976f3960592b2e\") }}", "test_metadata": {"name": "expect_column_values_to_match_like_pattern", "kwargs": {"like_pattern": "%@%", "column_name": "email_address", "model": "{{ get_where_subquery(ref('emails')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.emails"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_66c2f74a45dedfb6a0976f3960592b2e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_match_like_pattern_emails_email_address___"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_like_pattern_emails_email_address___.08c0c874a1", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_66c2f74a45dedfb6a0976f3960592b2e.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_match_like_pattern_emails_email_address___", "alias": "dbt_expectations_expect_column_66c2f74a45dedfb6a0976f3960592b2e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["emails"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_66c2f74a45dedfb6a0976f3960592b2e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_66c2f74a45dedfb6a0976f3960592b2e"}, "created_at": 1649080791.202343, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \nemail_address  like '%@%'\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.emails\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_address", "file_key_name": "models.emails"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_like_pattern_emails_email_address___.969be3889d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_not_match_like_pattern(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_48a06c8176781918327ec96b2a6ae2cd\") }}", "test_metadata": {"name": "expect_column_values_to_not_match_like_pattern", "kwargs": {"like_pattern": "%&%", "column_name": "email_address", "model": "{{ get_where_subquery(ref('emails')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.emails"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_48a06c8176781918327ec96b2a6ae2cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_not_match_like_pattern_emails_email_address___"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_like_pattern_emails_email_address___.969be3889d", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_48a06c8176781918327ec96b2a6ae2cd.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_not_match_like_pattern_emails_email_address___", "alias": "dbt_expectations_expect_column_48a06c8176781918327ec96b2a6ae2cd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["emails"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_48a06c8176781918327ec96b2a6ae2cd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_48a06c8176781918327ec96b2a6ae2cd"}, "created_at": 1649080791.2097762, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \nemail_address not like '%&%'\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.emails\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_address", "file_key_name": "models.emails"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_like_pattern_list_emails_email_address______.004645a3ac": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_like_pattern_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bf499d536590ee781c76a572315de956\") }}", "test_metadata": {"name": "expect_column_values_to_match_like_pattern_list", "kwargs": {"like_pattern_list": ["%@%", "%&%"], "column_name": "email_address", "model": "{{ get_where_subquery(ref('emails')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.emails"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bf499d536590ee781c76a572315de956", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_match_like_pattern_list_emails_email_address______"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_like_pattern_list_emails_email_address______.004645a3ac", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_bf499d536590ee781c76a572315de956.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_match_like_pattern_list_emails_email_address______", "alias": "dbt_expectations_expect_column_bf499d536590ee781c76a572315de956", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["emails"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_bf499d536590ee781c76a572315de956.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_bf499d536590ee781c76a572315de956"}, "created_at": 1649080791.216635, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    \nemail_address  like '%@%'\n\n     or \n    \n    \nemail_address  like '%&%'\n\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.emails\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_address", "file_key_name": "models.emails"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_like_pattern_list_emails_email_address______.31da73e0cd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_854e9090791330dc01170c9373995ce7\") }}", "test_metadata": {"name": "expect_column_values_to_not_match_like_pattern_list", "kwargs": {"like_pattern_list": ["%@%", "%&%"], "column_name": "email_address", "model": "{{ get_where_subquery(ref('emails')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.emails"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_854e9090791330dc01170c9373995ce7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_not_match_like_pattern_list_emails_email_address______"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_like_pattern_list_emails_email_address______.31da73e0cd", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_854e9090791330dc01170c9373995ce7.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_not_match_like_pattern_list_emails_email_address______", "alias": "dbt_expectations_expect_column_854e9090791330dc01170c9373995ce7", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["emails"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_854e9090791330dc01170c9373995ce7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_854e9090791330dc01170c9373995ce7"}, "created_at": 1649080791.225037, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    \nemail_address not like '%@%'\n\n     or \n    \n    \nemail_address not like '%&%'\n\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.emails\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_address", "file_key_name": "models.emails"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_day__day__1.9222375acc": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_23aaf8443c8d15f6e320bec0ef1f3aaa\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "date_day", "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_23aaf8443c8d15f6e320bec0ef1f3aaa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_day__day__1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_day__day__1.9222375acc", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_row_va_23aaf8443c8d15f6e320bec0ef1f3aaa.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_day__day__1", "alias": "dbt_expectations_expect_row_va_23aaf8443c8d15f6e320bec0ef1f3aaa", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_row_va_23aaf8443c8d15f6e320bec0ef1f3aaa.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_23aaf8443c8d15f6e320bec0ef1f3aaa"}, "created_at": 1649080791.233748, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(date_day as timestamp without time zone)) as max_timestamp\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data\n    where\n        cast(date_day as timestamp without time zone) <= cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp without time zone))\n        <\n        cast(\n\n    cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone) + ((interval '1 day') * (-1))\n\n as timestamp without time zone)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_day__date___dbt_expectations_type_timestamp_.79af0ea1f3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_837727f0f2d148961efd320d1e7831af\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["date", "{{ dbt_expectations.type_timestamp() }}"], "column_name": "date_day", "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery", "macro.dbt_expectations.type_timestamp"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_837727f0f2d148961efd320d1e7831af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_day__date___dbt_expectations_type_timestamp_"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_day__date___dbt_expectations_type_timestamp_.79af0ea1f3", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_837727f0f2d148961efd320d1e7831af.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_day__date___dbt_expectations_type_timestamp_", "alias": "dbt_expectations_expect_column_837727f0f2d148961efd320d1e7831af", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_837727f0f2d148961efd320d1e7831af.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_837727f0f2d148961efd320d1e7831af"}, "created_at": 1649080791.244908, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE_DAY' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP WITHOUT TIME ZONE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE_DATETIME' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP WITHOUT TIME ZONE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP WITHOUT TIME ZONE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROW_VALUE' as \n    varchar\n) as relation_column,\n            cast('DOUBLE PRECISION' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROW_VALUE_LOG' as \n    varchar\n) as relation_column,\n            cast('DOUBLE PRECISION' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE_DAY'\n            and\n            relation_column_type not in ('DATE', 'TIMESTAMP WITHOUT TIME ZONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_timeseries_data_date_day__date_day.b349b0a845": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_increasing(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_915dfb9e2254099b3af9caf4141b33a5\") }}", "test_metadata": {"name": "expect_column_values_to_be_increasing", "kwargs": {"sort_column": "date_day", "column_name": "date_day", "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_915dfb9e2254099b3af9caf4141b33a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_increasing_timeseries_data_date_day__date_day"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_timeseries_data_date_day__date_day.b349b0a845", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_915dfb9e2254099b3af9caf4141b33a5.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_increasing_timeseries_data_date_day__date_day", "alias": "dbt_expectations_expect_column_915dfb9e2254099b3af9caf4141b33a5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_915dfb9e2254099b3af9caf4141b33a5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_915dfb9e2254099b3af9caf4141b33a5"}, "created_at": 1649080791.253689, "compiled_sql": "with all_values as (\n\n    select\n        date_day as sort_column,\n        date_day as value_field\n    from postgres.dbt_expectations_integration_tests.timeseries_data\n    \n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over(order by sort_column) as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field > value_field_lag)\n\n)\nselect *\nfrom validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__ref_timeseries_data_extended_.6fd6f4ea6b": {"raw_sql": "{{ dbt_expectations.test_expect_column_distinct_count_to_equal_other_table(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3edaa1ecaf7bbf66cd8c73b0912ce25c\") }}", "test_metadata": {"name": "expect_column_distinct_count_to_equal_other_table", "kwargs": {"compare_model": "ref(\"timeseries_data_extended\")", "column_name": "date_day", "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_extended", "model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3edaa1ecaf7bbf66cd8c73b0912ce25c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__ref_timeseries_data_extended_"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__ref_timeseries_data_extended_.6fd6f4ea6b", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_3edaa1ecaf7bbf66cd8c73b0912ce25c.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__ref_timeseries_data_extended_", "alias": "dbt_expectations_expect_column_3edaa1ecaf7bbf66cd8c73b0912ce25c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_extended"], ["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_3edaa1ecaf7bbf66cd8c73b0912ce25c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3edaa1ecaf7bbf66cd8c73b0912ce25c"}, "created_at": 1649080791.262006, "compiled_sql": "\n    with a as (\n        \n    select\n        \n        count(distinct date_day) as expression\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data\n    \n\n    ),\n    b as (\n        \n    select\n        \n        count(distinct date_day) as expression\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data_extended\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_datetime__day__1.29c33143be": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_aa49d620b84b67b5dab2fba206867d54\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "date_datetime", "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_aa49d620b84b67b5dab2fba206867d54", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_datetime__day__1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_datetime__day__1.29c33143be", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_row_va_aa49d620b84b67b5dab2fba206867d54.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_datetime__day__1", "alias": "dbt_expectations_expect_row_va_aa49d620b84b67b5dab2fba206867d54", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_row_va_aa49d620b84b67b5dab2fba206867d54.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_aa49d620b84b67b5dab2fba206867d54"}, "created_at": 1649080791.282604, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(date_datetime as timestamp without time zone)) as max_timestamp\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data\n    where\n        cast(date_datetime as timestamp without time zone) <= cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp without time zone))\n        <\n        cast(\n\n    cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone) + ((interval '1 day') * (-1))\n\n as timestamp without time zone)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_datetime", "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_datetime__date___dbt_expectations_type_datetime_.a431470019": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1cfed4d5a72647b089bb8ff513269498\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["date", "{{ dbt_expectations.type_datetime() }}"], "column_name": "date_datetime", "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery", "macro.dbt_expectations.type_datetime"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1cfed4d5a72647b089bb8ff513269498", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_datetime__date___dbt_expectations_type_datetime_"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_datetime__date___dbt_expectations_type_datetime_.a431470019", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_1cfed4d5a72647b089bb8ff513269498.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_datetime__date___dbt_expectations_type_datetime_", "alias": "dbt_expectations_expect_column_1cfed4d5a72647b089bb8ff513269498", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_1cfed4d5a72647b089bb8ff513269498.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1cfed4d5a72647b089bb8ff513269498"}, "created_at": 1649080791.288034, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE_DAY' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP WITHOUT TIME ZONE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE_DATETIME' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP WITHOUT TIME ZONE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP WITHOUT TIME ZONE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROW_VALUE' as \n    varchar\n) as relation_column,\n            cast('DOUBLE PRECISION' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROW_VALUE_LOG' as \n    varchar\n) as relation_column,\n            cast('DOUBLE PRECISION' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE_DATETIME'\n            and\n            relation_column_type not in ('DATE', 'TIMESTAMP WITHOUT TIME ZONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_datetime", "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_timestamp__day__1.300ccbdad1": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_bd5bfd3704842cc90136c80223125d59\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "date_timestamp", "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_bd5bfd3704842cc90136c80223125d59", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_timestamp__day__1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_timestamp__day__1.300ccbdad1", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_row_va_bd5bfd3704842cc90136c80223125d59.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_timestamp__day__1", "alias": "dbt_expectations_expect_row_va_bd5bfd3704842cc90136c80223125d59", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_row_va_bd5bfd3704842cc90136c80223125d59.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_bd5bfd3704842cc90136c80223125d59"}, "created_at": 1649080791.292659, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(date_timestamp as timestamp without time zone)) as max_timestamp\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data\n    where\n        cast(date_timestamp as timestamp without time zone) <= cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp without time zone))\n        <\n        cast(\n\n    cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone) + ((interval '1 day') * (-1))\n\n as timestamp without time zone)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_timestamp", "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_timestamp__date___dbt_expectations_type_timestamp_.4fc8b3eb42": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_390c5968031d3a12d537ab647e920d50\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["date", "{{ dbt_expectations.type_timestamp() }}"], "column_name": "date_timestamp", "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery", "macro.dbt_expectations.type_timestamp"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_390c5968031d3a12d537ab647e920d50", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_timestamp__date___dbt_expectations_type_timestamp_"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_timestamp__date___dbt_expectations_type_timestamp_.4fc8b3eb42", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_390c5968031d3a12d537ab647e920d50.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_timestamp__date___dbt_expectations_type_timestamp_", "alias": "dbt_expectations_expect_column_390c5968031d3a12d537ab647e920d50", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_390c5968031d3a12d537ab647e920d50.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_390c5968031d3a12d537ab647e920d50"}, "created_at": 1649080791.298888, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE_DAY' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP WITHOUT TIME ZONE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE_DATETIME' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP WITHOUT TIME ZONE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATE_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP WITHOUT TIME ZONE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROW_VALUE' as \n    varchar\n) as relation_column,\n            cast('DOUBLE PRECISION' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROW_VALUE_LOG' as \n    varchar\n) as relation_column,\n            cast('DOUBLE PRECISION' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE_TIMESTAMP'\n            and\n            relation_column_type not in ('DATE', 'TIMESTAMP WITHOUT TIME ZONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_timestamp", "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_stdevs_timeseries_data_row_value__6.be239e407d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_within_n_stdevs(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5442cc4cdb958512adad79a84cf7a30c\") }}", "test_metadata": {"name": "expect_column_values_to_be_within_n_stdevs", "kwargs": {"sigma_threshold": 6, "column_name": "row_value", "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5442cc4cdb958512adad79a84cf7a30c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_within_n_stdevs_timeseries_data_row_value__6"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_stdevs_timeseries_data_row_value__6.be239e407d", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_5442cc4cdb958512adad79a84cf7a30c.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_within_n_stdevs_timeseries_data_row_value__6", "alias": "dbt_expectations_expect_column_5442cc4cdb958512adad79a84cf7a30c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_5442cc4cdb958512adad79a84cf7a30c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5442cc4cdb958512adad79a84cf7a30c"}, "created_at": 1649080791.3034801, "compiled_sql": "\nwith metric_values as (\n\n    select\n        row_value as row_value\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg(row_value) over() as row_value_average,\n        stddev(row_value) over() as row_value_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        (row_value - row_value_average)/row_value_stddev as row_value_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs(row_value_sigma) > 6", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "row_value", "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_data_row_value__date_day__6__True.86019a24d0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_expectations_expect_column_05317438a1bc527d03e6fe64a03e8ebe\") }}", "test_metadata": {"name": "expect_column_values_to_be_within_n_moving_stdevs", "kwargs": {"date_column_name": "date_day", "sigma_threshold": 6, "take_logs": true, "column_name": "row_value", "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_05317438a1bc527d03e6fe64a03e8ebe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_data_row_value__date_day__6__True"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_data_row_value__date_day__6__True.86019a24d0", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_05317438a1bc527d03e6fe64a03e8ebe.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_data_row_value__date_day__6__True", "alias": "dbt_expectations_expect_column_05317438a1bc527d03e6fe64a03e8ebe", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_05317438a1bc527d03e6fe64a03e8ebe.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "dbt_expectations_expect_column_05317438a1bc527d03e6fe64a03e8ebe"}, "created_at": 1649080791.312373, "compiled_sql": "with metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            \n    date_trunc('day', date_day)\n as metric_period,\n            sum(row_value) as agg_metric_value\n        from\n            postgres.dbt_expectations_integration_tests.timeseries_data\n        group by\n            1\n\n    ),\n    grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, 1) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        coalesce(\n\n    ln(nullif(agg_metric_value, 0))\n, 0)\n        -\n        coalesce(\n\n    ln(nullif(prior_agg_metric_value, 0))\n, 0)\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between 7 preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between 7 preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            \n\n    \n    date_trunc('day', cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone))\n + ((interval '1 day') * (-14))\n\n\n            as timestamp without time zone)\n    and\n    metric_period < \n    date_trunc('day', cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone))\n\n    and\n\n    not (\n        metric_test_sigma >= -6 and\n        metric_test_sigma <= 6\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "row_value", "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_timeseries_data_date_day__date_datetime__date_timestamp__row_value__row_value_log.fea981f1fa": {"raw_sql": "{{ dbt_expectations.test_expect_table_columns_to_match_ordered_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__621ef6bb868bff0c481d279dd102649c\") }}", "test_metadata": {"name": "expect_table_columns_to_match_ordered_list", "kwargs": {"column_list": ["date_day", "date_datetime", "date_timestamp", "row_value", "row_value_log"], "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__621ef6bb868bff0c481d279dd102649c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_columns_to_match_ordered_list_timeseries_data_date_day__date_datetime__date_timestamp__row_value__row_value_log"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_timeseries_data_date_day__date_datetime__date_timestamp__row_value__row_value_log.fea981f1fa", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__621ef6bb868bff0c481d279dd102649c.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_columns_to_match_ordered_list_timeseries_data_date_day__date_datetime__date_timestamp__row_value__row_value_log", "alias": "dbt_expectations_expect_table__621ef6bb868bff0c481d279dd102649c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__621ef6bb868bff0c481d279dd102649c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__621ef6bb868bff0c481d279dd102649c"}, "created_at": 1649080791.331075, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('DATE_DAY' as \n    varchar\n) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('DATE_DATETIME' as \n    varchar\n) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('DATE_TIMESTAMP' as \n    varchar\n) as relation_column\n        union all\n        \n        select\n            4 as relation_column_idx,\n            cast('ROW_VALUE' as \n    varchar\n) as relation_column\n        union all\n        \n        select\n            5 as relation_column_idx,\n            cast('ROW_VALUE_LOG' as \n    varchar\n) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('DATE_DAY' as \n    varchar\n) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('DATE_DATETIME' as \n    varchar\n) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('DATE_TIMESTAMP' as \n    varchar\n) as input_column\n        union all\n        \n        select\n            4 as input_column_idx,\n            cast('ROW_VALUE' as \n    varchar\n) as input_column\n        union all\n        \n        select\n            5 as input_column_idx,\n            cast('ROW_VALUE_LOG' as \n    varchar\n) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__date_day__ref_timeseries_data_extended_.668a389f21": {"raw_sql": "{{ dbt_expectations.test_expect_column_distinct_count_to_equal_other_table(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_533122a91f29765fd6848c3ff572a229\") }}", "test_metadata": {"name": "expect_column_distinct_count_to_equal_other_table", "kwargs": {"column_name": "date_day", "compare_model": "ref(\"timeseries_data_extended\")", "compare_column_name": "date_day", "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_extended", "model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_533122a91f29765fd6848c3ff572a229", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__date_day__ref_timeseries_data_extended_"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__date_day__ref_timeseries_data_extended_.668a389f21", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_533122a91f29765fd6848c3ff572a229.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__date_day__ref_timeseries_data_extended_", "alias": "dbt_expectations_expect_column_533122a91f29765fd6848c3ff572a229", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_extended"], ["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_533122a91f29765fd6848c3ff572a229.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_533122a91f29765fd6848c3ff572a229"}, "created_at": 1649080791.3407319, "compiled_sql": "\n    with a as (\n        \n    select\n        \n        count(distinct date_day) as expression\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data\n    \n\n    ),\n    b as (\n        \n    select\n        \n        count(distinct date_day) as expression\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data_extended\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day.79cb16c1eb": {"raw_sql": "{{ dbt_expectations.test_expect_column_distinct_count_to_equal_other_table(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ecf05a8ee93aef75b0e34757b4fdec84\") }}", "test_metadata": {"name": "expect_column_distinct_count_to_equal_other_table", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ecf05a8ee93aef75b0e34757b4fdec84", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day.79cb16c1eb", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_ecf05a8ee93aef75b0e34757b4fdec84.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day", "alias": "dbt_expectations_expect_column_ecf05a8ee93aef75b0e34757b4fdec84", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_ecf05a8ee93aef75b0e34757b4fdec84.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ecf05a8ee93aef75b0e34757b4fdec84"}, "created_at": 1649080791.346338, "compiled_sql": "\n    with a as (\n        \n    select\n        \n        count(distinct date_day) as expression\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data\n    \n\n    ),\n    b as (\n        \n    select\n        \n        count(distinct date_day) as expression\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_date_day__day.910ac3a171": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_71f4b45998e8bf5ad45db7ce6b2f0ea0\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date_day", "date_part": "day", "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_71f4b45998e8bf5ad45db7ce6b2f0ea0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_date_day__day"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_date_day__day.910ac3a171", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_row_va_71f4b45998e8bf5ad45db7ce6b2f0ea0.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_date_day__day", "alias": "dbt_expectations_expect_row_va_71f4b45998e8bf5ad45db7ce6b2f0ea0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_row_va_71f4b45998e8bf5ad45db7ce6b2f0ea0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_71f4b45998e8bf5ad45db7ce6b2f0ea0"}, "created_at": 1649080791.350661, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 366\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2021-04-02' as timestamp without time zone) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-04-03' as timestamp without time zone)\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as timestamp without time zone) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(\n    date_trunc('day', date_day)\n as timestamp without time zone) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data f\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as timestamp without time zone) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as timestamp without time zone) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_date_day__day__not_date_day_2021_10_19_.39ae519ce7": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0bed3b6651bb9f7221c899e2d56e5f96\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date_day", "date_part": "day", "exclusion_condition": "not(date_day = '2021-10-19')", "model": "{{ get_where_subquery(ref('timeseries_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0bed3b6651bb9f7221c899e2d56e5f96", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_date_day__day__not_date_day_2021_10_19_"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_date_day__day__not_date_day_2021_10_19_.39ae519ce7", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_row_va_0bed3b6651bb9f7221c899e2d56e5f96.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_date_day__day__not_date_day_2021_10_19_", "alias": "dbt_expectations_expect_row_va_0bed3b6651bb9f7221c899e2d56e5f96", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_row_va_0bed3b6651bb9f7221c899e2d56e5f96.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_0bed3b6651bb9f7221c899e2d56e5f96"}, "created_at": 1649080791.371095, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 366\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2021-04-02' as timestamp without time zone) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-04-03' as timestamp without time zone)\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as timestamp without time zone) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(\n    date_trunc('day', date_day)\n as timestamp without time zone) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data f\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as timestamp without time zone) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as timestamp without time zone) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n\n  and not(date_day = '2021-10-19')\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_data"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_extended_date_day__day__1.918ff17d7d": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_31021e665736eb4eeb7b81c8a3d40755\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "date_day", "model": "{{ get_where_subquery(ref('timeseries_data_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_31021e665736eb4eeb7b81c8a3d40755", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_extended_date_day__day__1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_extended_date_day__day__1.918ff17d7d", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_row_va_31021e665736eb4eeb7b81c8a3d40755.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_extended_date_day__day__1", "alias": "dbt_expectations_expect_row_va_31021e665736eb4eeb7b81c8a3d40755", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_row_va_31021e665736eb4eeb7b81c8a3d40755.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_31021e665736eb4eeb7b81c8a3d40755"}, "created_at": 1649080791.376044, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(date_day as timestamp without time zone)) as max_timestamp\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data_extended\n    where\n        cast(date_day as timestamp without time zone) <= cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp without time zone))\n        <\n        cast(\n\n    cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone) + ((interval '1 day') * (-1))\n\n as timestamp without time zone)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.timeseries_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_of_type_timeseries_data_extended_date_day___dbt_expectations_type_datetime_.3377fc291f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b11cefb7a4df24c6744f6a652502dd8d\") }}", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "{{ dbt_expectations.type_datetime() }}", "column_name": "date_day", "model": "{{ get_where_subquery(ref('timeseries_data_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery", "macro.dbt_expectations.type_datetime"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b11cefb7a4df24c6744f6a652502dd8d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_of_type_timeseries_data_extended_date_day___dbt_expectations_type_datetime_"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_of_type_timeseries_data_extended_date_day___dbt_expectations_type_datetime_.3377fc291f", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_b11cefb7a4df24c6744f6a652502dd8d.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_timeseries_data_extended_date_day___dbt_expectations_type_datetime_", "alias": "dbt_expectations_expect_column_b11cefb7a4df24c6744f6a652502dd8d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_b11cefb7a4df24c6744f6a652502dd8d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b11cefb7a4df24c6744f6a652502dd8d"}, "created_at": 1649080791.382406, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE_DAY' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP WITHOUT TIME ZONE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROW_VALUE' as \n    varchar\n) as relation_column,\n            cast('DOUBLE PRECISION' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROW_VALUE_LOG' as \n    varchar\n) as relation_column,\n            cast('DOUBLE PRECISION' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE_DAY'\n            and\n            relation_column_type not in ('TIMESTAMP WITHOUT TIME ZONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.timeseries_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_extended_date_day__date___dbt_expectations_type_datetime_.64544aba59": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e6bd8a874a72fd7d31719d3d13064790\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["date", "{{ dbt_expectations.type_datetime() }}"], "column_name": "date_day", "model": "{{ get_where_subquery(ref('timeseries_data_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery", "macro.dbt_expectations.type_datetime"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e6bd8a874a72fd7d31719d3d13064790", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_extended_date_day__date___dbt_expectations_type_datetime_"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_extended_date_day__date___dbt_expectations_type_datetime_.64544aba59", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_e6bd8a874a72fd7d31719d3d13064790.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_extended_date_day__date___dbt_expectations_type_datetime_", "alias": "dbt_expectations_expect_column_e6bd8a874a72fd7d31719d3d13064790", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_e6bd8a874a72fd7d31719d3d13064790.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e6bd8a874a72fd7d31719d3d13064790"}, "created_at": 1649080791.387858, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE_DAY' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP WITHOUT TIME ZONE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROW_VALUE' as \n    varchar\n) as relation_column,\n            cast('DOUBLE PRECISION' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROW_VALUE_LOG' as \n    varchar\n) as relation_column,\n            cast('DOUBLE PRECISION' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE_DAY'\n            and\n            relation_column_type not in ('DATE', 'TIMESTAMP WITHOUT TIME ZONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.timeseries_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_timeseries_data_extended_row_value__date_day_dbt_date_yesterday___10.633f73d315": {"raw_sql": "{{ dbt_expectations.test_expect_column_distinct_count_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5962522b7fc265dccebfd2e53995c849\") }}", "test_metadata": {"name": "expect_column_distinct_count_to_equal", "kwargs": {"row_condition": "date_day = {{ dbt_date.yesterday() }}", "value": 10, "column_name": "row_value", "model": "{{ get_where_subquery(ref('timeseries_data_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro.dbt.get_where_subquery", "macro.dbt_date.yesterday"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5962522b7fc265dccebfd2e53995c849", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_distinct_count_to_equal_timeseries_data_extended_row_value__date_day_dbt_date_yesterday___10"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_timeseries_data_extended_row_value__date_day_dbt_date_yesterday___10.633f73d315", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_5962522b7fc265dccebfd2e53995c849.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_distinct_count_to_equal_timeseries_data_extended_row_value__date_day_dbt_date_yesterday___10", "alias": "dbt_expectations_expect_column_5962522b7fc265dccebfd2e53995c849", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_5962522b7fc265dccebfd2e53995c849.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5962522b7fc265dccebfd2e53995c849"}, "created_at": 1649080791.392534, "compiled_sql": "\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \ncount(distinct row_value) = 10\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.timeseries_data_extended\n    where\n        date_day = cast(\n\n    cast(cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone) as date) + ((interval '1 day') * (-1))\n\n as date)\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "row_value", "file_key_name": "models.timeseries_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_be_greater_than_timeseries_data_extended_row_value__date_day_dbt_date_yesterday___1.ab45a07e5c": {"raw_sql": "{{ dbt_expectations.test_expect_column_distinct_count_to_be_greater_than(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_eba4a4c027cd681bc97d36e2e9320fe2\") }}", "test_metadata": {"name": "expect_column_distinct_count_to_be_greater_than", "kwargs": {"row_condition": "date_day = {{ dbt_date.yesterday() }}", "value": 1, "column_name": "row_value", "model": "{{ get_where_subquery(ref('timeseries_data_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro.dbt.get_where_subquery", "macro.dbt_date.yesterday"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_eba4a4c027cd681bc97d36e2e9320fe2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_distinct_count_to_be_greater_than_timeseries_data_extended_row_value__date_day_dbt_date_yesterday___1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_be_greater_than_timeseries_data_extended_row_value__date_day_dbt_date_yesterday___1.ab45a07e5c", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_eba4a4c027cd681bc97d36e2e9320fe2.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_distinct_count_to_be_greater_than_timeseries_data_extended_row_value__date_day_dbt_date_yesterday___1", "alias": "dbt_expectations_expect_column_eba4a4c027cd681bc97d36e2e9320fe2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_eba4a4c027cd681bc97d36e2e9320fe2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_eba4a4c027cd681bc97d36e2e9320fe2"}, "created_at": 1649080791.400269, "compiled_sql": "\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \ncount(distinct row_value) > 1\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.timeseries_data_extended\n    where\n        date_day = cast(\n\n    cast(cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone) as date) + ((interval '1 day') * (-1))\n\n as date)\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "row_value", "file_key_name": "models.timeseries_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_data_extended_row_value_log__cast_date_day_as_dbt_expectations_type_datetime___6__False.91749cfd51": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_expectations_expect_column_7c415d95f2676319d2bdb189bcbcaa76\") }}", "test_metadata": {"name": "expect_column_values_to_be_within_n_moving_stdevs", "kwargs": {"date_column_name": "cast(date_day as {{ dbt_expectations.type_datetime() }})", "sigma_threshold": 6, "take_logs": false, "column_name": "row_value_log", "model": "{{ get_where_subquery(ref('timeseries_data_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro.dbt.get_where_subquery", "macro.dbt_expectations.type_datetime"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7c415d95f2676319d2bdb189bcbcaa76", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_data_extended_row_value_log__cast_date_day_as_dbt_expectations_type_datetime___6__False"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_data_extended_row_value_log__cast_date_day_as_dbt_expectations_type_datetime___6__False.91749cfd51", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_7c415d95f2676319d2bdb189bcbcaa76.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_data_extended_row_value_log__cast_date_day_as_dbt_expectations_type_datetime___6__False", "alias": "dbt_expectations_expect_column_7c415d95f2676319d2bdb189bcbcaa76", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_7c415d95f2676319d2bdb189bcbcaa76.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "dbt_expectations_expect_column_7c415d95f2676319d2bdb189bcbcaa76"}, "created_at": 1649080791.4070761, "compiled_sql": "with metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            \n    date_trunc('day', cast(date_day as timestamp without time zone))\n as metric_period,\n            sum(row_value_log) as agg_metric_value\n        from\n            postgres.dbt_expectations_integration_tests.timeseries_data_extended\n        group by\n            1\n\n    ),\n    grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, 1) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        coalesce(agg_metric_value, 0)\n        -\n        coalesce(prior_agg_metric_value, 0)\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between 7 preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between 7 preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            \n\n    \n    date_trunc('day', cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone))\n + ((interval '1 day') * (-14))\n\n\n            as timestamp without time zone)\n    and\n    metric_period < \n    date_trunc('day', cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone))\n\n    and\n\n    not (\n        metric_test_sigma >= -6 and\n        metric_test_sigma <= 6\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "row_value_log", "file_key_name": "models.timeseries_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_timeseries_data_extended_date_day__row_value__row_value_log.c4fbe0bb2c": {"raw_sql": "{{ dbt_expectations.test_expect_table_columns_to_match_ordered_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__bb7eb401e16c326c4b1bb599f8343f12\") }}", "test_metadata": {"name": "expect_table_columns_to_match_ordered_list", "kwargs": {"column_list": ["date_day", "row_value", "row_value_log"], "model": "{{ get_where_subquery(ref('timeseries_data_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__bb7eb401e16c326c4b1bb599f8343f12", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_columns_to_match_ordered_list_timeseries_data_extended_date_day__row_value__row_value_log"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_timeseries_data_extended_date_day__row_value__row_value_log.c4fbe0bb2c", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__bb7eb401e16c326c4b1bb599f8343f12.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_columns_to_match_ordered_list_timeseries_data_extended_date_day__row_value__row_value_log", "alias": "dbt_expectations_expect_table__bb7eb401e16c326c4b1bb599f8343f12", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__bb7eb401e16c326c4b1bb599f8343f12.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__bb7eb401e16c326c4b1bb599f8343f12"}, "created_at": 1649080791.4145868, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('DATE_DAY' as \n    varchar\n) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('ROW_VALUE' as \n    varchar\n) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('ROW_VALUE_LOG' as \n    varchar\n) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('DATE_DAY' as \n    varchar\n) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('ROW_VALUE' as \n    varchar\n) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('ROW_VALUE_LOG' as \n    varchar\n) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_extended_date_day__day.fef2d1f342": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_106138db9c125c3e786274b02c6b0b62\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date_day", "date_part": "day", "model": "{{ get_where_subquery(ref('timeseries_data_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_106138db9c125c3e786274b02c6b0b62", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_extended_date_day__day"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_extended_date_day__day.fef2d1f342", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_row_va_106138db9c125c3e786274b02c6b0b62.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_extended_date_day__day", "alias": "dbt_expectations_expect_row_va_106138db9c125c3e786274b02c6b0b62", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_row_va_106138db9c125c3e786274b02c6b0b62.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_106138db9c125c3e786274b02c6b0b62"}, "created_at": 1649080791.4194849, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 366\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2021-04-02' as timestamp without time zone) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-04-03' as timestamp without time zone)\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as timestamp without time zone) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(\n    date_trunc('day', date_day)\n as timestamp without time zone) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data_extended f\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as timestamp without time zone) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as timestamp without time zone) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_extended_date_day__day__7.e436a78560": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_a6fa9f8b8c0c964d84c26185c0dab7f3\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date_day", "date_part": "day", "interval": 7, "model": "{{ get_where_subquery(ref('timeseries_data_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_a6fa9f8b8c0c964d84c26185c0dab7f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_extended_date_day__day__7"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_extended_date_day__day__7.e436a78560", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_row_va_a6fa9f8b8c0c964d84c26185c0dab7f3.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_extended_date_day__day__7", "alias": "dbt_expectations_expect_row_va_a6fa9f8b8c0c964d84c26185c0dab7f3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_row_va_a6fa9f8b8c0c964d84c26185c0dab7f3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_a6fa9f8b8c0c964d84c26185c0dab7f3"}, "created_at": 1649080791.424042, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 366\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2021-04-02' as timestamp without time zone) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-04-03' as timestamp without time zone)\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as timestamp without time zone) as date_day\nfrom\n    date_spine d\n\n\n    \n    \n    where mod(\n            cast(\n\n    \n        ((date_day)::date - ('2021-04-02')::date)\n    \n\n as \n    int\n),\n            cast(7 as \n    int\n)\n        ) = 0\n    \n\n),\nmodel_data as (\n\n    select\n    \n        \n        \n\n    cast( \n    date_trunc('day', date_day)\n as  timestamp without time zone) + ((interval '1 day') * (mod(\n                cast(\n\n    \n        ((date_day)::date - ('2021-04-02')::date)\n    \n\n as \n    int\n ),\n                cast(7 as  \n    int\n )\n            ) * (-1)))\n\n as date_day,\n            \n    \n    \n        count(*) as row_cnt\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data_extended f\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as timestamp without time zone) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as timestamp without time zone) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_hourly_data_extended_date_hour__hour__24.a182297cd8": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_e83053a68d0839ba2770091346e239e0\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "hour", "interval": 24, "column_name": "date_hour", "model": "{{ get_where_subquery(ref('timeseries_hourly_data_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_hourly_data_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_e83053a68d0839ba2770091346e239e0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_row_values_to_have_recent_data_timeseries_hourly_data_extended_date_hour__hour__24"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_hourly_data_extended_date_hour__hour__24.a182297cd8", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_row_va_e83053a68d0839ba2770091346e239e0.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_timeseries_hourly_data_extended_date_hour__hour__24", "alias": "dbt_expectations_expect_row_va_e83053a68d0839ba2770091346e239e0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_hourly_data_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_row_va_e83053a68d0839ba2770091346e239e0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_e83053a68d0839ba2770091346e239e0"}, "created_at": 1649080791.429743, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(date_hour as timestamp without time zone)) as max_timestamp\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_hourly_data_extended\n    where\n        cast(date_hour as timestamp without time zone) <= cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp without time zone))\n        <\n        cast(\n\n    cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone) + ((interval '1 hour') * (-24))\n\n as timestamp without time zone)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_hour", "file_key_name": "models.timeseries_hourly_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_of_type_timeseries_hourly_data_extended_date_hour___dbt_expectations_type_datetime_.fa9ac6d2a4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ac12dae9db4305a229f7b7a1c1e11ab7\") }}", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "{{ dbt_expectations.type_datetime() }}", "column_name": "date_hour", "model": "{{ get_where_subquery(ref('timeseries_hourly_data_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery", "macro.dbt_expectations.type_datetime"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_hourly_data_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ac12dae9db4305a229f7b7a1c1e11ab7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_of_type_timeseries_hourly_data_extended_date_hour___dbt_expectations_type_datetime_"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_of_type_timeseries_hourly_data_extended_date_hour___dbt_expectations_type_datetime_.fa9ac6d2a4", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_ac12dae9db4305a229f7b7a1c1e11ab7.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_timeseries_hourly_data_extended_date_hour___dbt_expectations_type_datetime_", "alias": "dbt_expectations_expect_column_ac12dae9db4305a229f7b7a1c1e11ab7", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_hourly_data_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_ac12dae9db4305a229f7b7a1c1e11ab7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ac12dae9db4305a229f7b7a1c1e11ab7"}, "created_at": 1649080791.435206, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE_HOUR' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP WITHOUT TIME ZONE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROW_VALUE' as \n    varchar\n) as relation_column,\n            cast('DOUBLE PRECISION' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROW_VALUE_LOG' as \n    varchar\n) as relation_column,\n            cast('DOUBLE PRECISION' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE_HOUR'\n            and\n            relation_column_type not in ('TIMESTAMP WITHOUT TIME ZONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_hour", "file_key_name": "models.timeseries_hourly_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_hourly_data_extended_date_hour___dbt_expectations_type_datetime_.e2af5fe244": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_68bee2c1f6c7d428f2e8e7c95a91e931\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["{{ dbt_expectations.type_datetime() }}"], "column_name": "date_hour", "model": "{{ get_where_subquery(ref('timeseries_hourly_data_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery", "macro.dbt_expectations.type_datetime"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_hourly_data_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_68bee2c1f6c7d428f2e8e7c95a91e931", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_hourly_data_extended_date_hour___dbt_expectations_type_datetime_"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_hourly_data_extended_date_hour___dbt_expectations_type_datetime_.e2af5fe244", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_68bee2c1f6c7d428f2e8e7c95a91e931.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_hourly_data_extended_date_hour___dbt_expectations_type_datetime_", "alias": "dbt_expectations_expect_column_68bee2c1f6c7d428f2e8e7c95a91e931", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_hourly_data_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_68bee2c1f6c7d428f2e8e7c95a91e931.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_68bee2c1f6c7d428f2e8e7c95a91e931"}, "created_at": 1649080791.439601, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('DATE_HOUR' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP WITHOUT TIME ZONE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROW_VALUE' as \n    varchar\n) as relation_column,\n            cast('DOUBLE PRECISION' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ROW_VALUE_LOG' as \n    varchar\n) as relation_column,\n            cast('DOUBLE PRECISION' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATE_HOUR'\n            and\n            relation_column_type not in ('TIMESTAMP WITHOUT TIME ZONE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_hour", "file_key_name": "models.timeseries_hourly_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_hourly_data_extended_row_value_log__cast_date_hour_as_dbt_expectations_type_datetime___hour__6__False__12__48.c200505cc1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_expectations_expect_column_0493856fc462613817b49ef69dd9c58a\") }}", "test_metadata": {"name": "expect_column_values_to_be_within_n_moving_stdevs", "kwargs": {"date_column_name": "cast(date_hour as {{ dbt_expectations.type_datetime() }})", "period": "hour", "trend_periods": 48, "test_periods": 12, "sigma_threshold": 6, "take_logs": false, "column_name": "row_value_log", "model": "{{ get_where_subquery(ref('timeseries_hourly_data_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro.dbt.get_where_subquery", "macro.dbt_expectations.type_datetime"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_hourly_data_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0493856fc462613817b49ef69dd9c58a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_hourly_data_extended_row_value_log__cast_date_hour_as_dbt_expectations_type_datetime___hour__6__False__12__48"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_hourly_data_extended_row_value_log__cast_date_hour_as_dbt_expectations_type_datetime___hour__6__False__12__48.c200505cc1", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_0493856fc462613817b49ef69dd9c58a.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_hourly_data_extended_row_value_log__cast_date_hour_as_dbt_expectations_type_datetime___hour__6__False__12__48", "alias": "dbt_expectations_expect_column_0493856fc462613817b49ef69dd9c58a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_hourly_data_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_0493856fc462613817b49ef69dd9c58a.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "dbt_expectations_expect_column_0493856fc462613817b49ef69dd9c58a"}, "created_at": 1649080791.444271, "compiled_sql": "with metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            \n    date_trunc('hour', cast(date_hour as timestamp without time zone))\n as metric_period,\n            sum(row_value_log) as agg_metric_value\n        from\n            postgres.dbt_expectations_integration_tests.timeseries_hourly_data_extended\n        group by\n            1\n\n    ),\n    grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, 1) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        coalesce(agg_metric_value, 0)\n        -\n        coalesce(prior_agg_metric_value, 0)\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between 48 preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between 48 preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            \n\n    \n    date_trunc('hour', cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone))\n + ((interval '1 hour') * (-12))\n\n\n            as timestamp without time zone)\n    and\n    metric_period < \n    date_trunc('hour', cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone))\n\n    and\n\n    not (\n        metric_test_sigma >= -6 and\n        metric_test_sigma <= 6\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "row_value_log", "file_key_name": "models.timeseries_hourly_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_hourly_data_extended_date_hour__hour.5afac62404": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_66b01d2da7995f5a7de822fb58e15ce7\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date_hour", "date_part": "hour", "model": "{{ get_where_subquery(ref('timeseries_hourly_data_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_hourly_data_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_66b01d2da7995f5a7de822fb58e15ce7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_hourly_data_extended_date_hour__hour"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_hourly_data_extended_date_hour__hour.5afac62404", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_row_va_66b01d2da7995f5a7de822fb58e15ce7.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_hourly_data_extended_date_hour__hour", "alias": "dbt_expectations_expect_row_va_66b01d2da7995f5a7de822fb58e15ce7", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_hourly_data_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_row_va_66b01d2da7995f5a7de822fb58e15ce7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_66b01d2da7995f5a7de822fb58e15ce7"}, "created_at": 1649080791.4514098, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 240.0\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2022-03-24' as timestamp without time zone) + ((interval '1 hour') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_hour\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_hour <= cast('2022-04-03' as timestamp without time zone)\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_hour as timestamp without time zone) as date_hour\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(\n    date_trunc('hour', date_hour)\n as timestamp without time zone) as date_hour,\n\n    \n    \n        count(*) as row_cnt\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_hourly_data_extended f\n    \n    group by\n        date_hour\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_hour as timestamp without time zone) as date_hour,\n        case when f.date_hour is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_hour as timestamp without time zone) = f.date_hour\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_hourly_data_extended"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_1__idx.fe00acd806": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_index": 1, "column_name": "idx", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_to_exist_data_test_1__idx"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_1__idx.fe00acd806", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_to_exist_data_test_1__idx.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_to_exist_data_test_1__idx", "alias": "dbt_expectations_expect_column_to_exist_data_test_1__idx", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_to_exist_data_test_1__idx.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649080791.455966, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('IDX' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "idx", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_unique_data_test_idx.1fedbd4c8c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d6985a2dd161d3de837fd7a792e250ff\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"column_name": "idx", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d6985a2dd161d3de837fd7a792e250ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_unique_data_test_idx"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_unique_data_test_idx.1fedbd4c8c", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_d6985a2dd161d3de837fd7a792e250ff.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_data_test_idx", "alias": "dbt_expectations_expect_column_d6985a2dd161d3de837fd7a792e250ff", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_d6985a2dd161d3de837fd7a792e250ff.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d6985a2dd161d3de837fd7a792e250ff"}, "created_at": 1649080791.46432, "compiled_sql": "\n\n\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        idx\n    from postgres.dbt_expectations_integration_tests.data_test\n    where 1=1\n    \n    group by\n        idx\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "idx", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_data_test_idx__idx.f1baf74a63": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_increasing(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2aec33d274059303ee418d03cd5b0d49\") }}", "test_metadata": {"name": "expect_column_values_to_be_increasing", "kwargs": {"sort_column": "idx", "column_name": "idx", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2aec33d274059303ee418d03cd5b0d49", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_increasing_data_test_idx__idx"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_data_test_idx__idx.f1baf74a63", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_2aec33d274059303ee418d03cd5b0d49.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_increasing_data_test_idx__idx", "alias": "dbt_expectations_expect_column_2aec33d274059303ee418d03cd5b0d49", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_2aec33d274059303ee418d03cd5b0d49.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2aec33d274059303ee418d03cd5b0d49"}, "created_at": 1649080791.476623, "compiled_sql": "with all_values as (\n\n    select\n        idx as sort_column,\n        idx as value_field\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over(order by sort_column) as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field > value_field_lag)\n\n)\nselect *\nfrom validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "idx", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_col_numeric_a.05ed4c08ef": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_to_exist_data_test_col_numeric_a"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_col_numeric_a.05ed4c08ef", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_to_exist_data_test_col_numeric_a.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_to_exist_data_test_col_numeric_a", "alias": "dbt_expectations_expect_column_to_exist_data_test_col_numeric_a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_to_exist_data_test_col_numeric_a.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649080791.481662, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('COL_NUMERIC_A' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_3__col_numeric_a.707ebd64f9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4ac93c8961fe07fef8be60820d47a422\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_index": 3, "column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4ac93c8961fe07fef8be60820d47a422", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_to_exist_data_test_3__col_numeric_a"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_3__col_numeric_a.707ebd64f9", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_4ac93c8961fe07fef8be60820d47a422.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_to_exist_data_test_3__col_numeric_a", "alias": "dbt_expectations_expect_column_4ac93c8961fe07fef8be60820d47a422", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_4ac93c8961fe07fef8be60820d47a422.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4ac93c8961fe07fef8be60820d47a422"}, "created_at": 1649080791.4850109, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('COL_NUMERIC_A' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_null_data_test_col_numeric_a.1c5c036a67": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_not_be_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f9cc2553c3f7be5306b0ba058123a38a\") }}", "test_metadata": {"name": "expect_column_values_to_not_be_null", "kwargs": {"column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f9cc2553c3f7be5306b0ba058123a38a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_not_be_null_data_test_col_numeric_a"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_null_data_test_col_numeric_a.1c5c036a67", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_f9cc2553c3f7be5306b0ba058123a38a.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_not_be_null_data_test_col_numeric_a", "alias": "dbt_expectations_expect_column_f9cc2553c3f7be5306b0ba058123a38a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_f9cc2553c3f7be5306b0ba058123a38a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f9cc2553c3f7be5306b0ba058123a38a"}, "created_at": 1649080791.489275, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  col_numeric_a is not null as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_between_data_test_col_numeric_a__1__0.dd0c29c89d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_82e2a3dc577c3b6000c4507dea3c9f5c\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_82e2a3dc577c3b6000c4507dea3c9f5c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_between_data_test_col_numeric_a__1__0"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_between_data_test_col_numeric_a__1__0.dd0c29c89d", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_82e2a3dc577c3b6000c4507dea3c9f5c.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_between_data_test_col_numeric_a__1__0", "alias": "dbt_expectations_expect_column_82e2a3dc577c3b6000c4507dea3c9f5c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_82e2a3dc577c3b6000c4507dea3c9f5c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_82e2a3dc577c3b6000c4507dea3c9f5c"}, "created_at": 1649080791.49541, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and col_numeric_a >= 0 and col_numeric_a <= 1\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_between_data_test_col_numeric_a__0.38e10ae5de": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_33c7237f7ccbf6f7fbc046ab4847dd43\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_33c7237f7ccbf6f7fbc046ab4847dd43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_between_data_test_col_numeric_a__0"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_between_data_test_col_numeric_a__0.38e10ae5de", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_33c7237f7ccbf6f7fbc046ab4847dd43.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_between_data_test_col_numeric_a__0", "alias": "dbt_expectations_expect_column_33c7237f7ccbf6f7fbc046ab4847dd43", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_33c7237f7ccbf6f7fbc046ab4847dd43.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_33c7237f7ccbf6f7fbc046ab4847dd43"}, "created_at": 1649080791.5060139, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and col_numeric_a >= 0\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_sum_to_be_between_data_test_col_numeric_a__3__1.768d8a3df1": {"raw_sql": "{{ dbt_expectations.test_expect_column_sum_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1a9fa430f4b86b3f240d87bd2aa95ac2\") }}", "test_metadata": {"name": "expect_column_sum_to_be_between", "kwargs": {"min_value": 1, "max_value": 3, "column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1a9fa430f4b86b3f240d87bd2aa95ac2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_sum_to_be_between_data_test_col_numeric_a__3__1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_sum_to_be_between_data_test_col_numeric_a__3__1.768d8a3df1", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_1a9fa430f4b86b3f240d87bd2aa95ac2.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_sum_to_be_between_data_test_col_numeric_a__3__1", "alias": "dbt_expectations_expect_column_1a9fa430f4b86b3f240d87bd2aa95ac2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_1a9fa430f4b86b3f240d87bd2aa95ac2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1a9fa430f4b86b3f240d87bd2aa95ac2"}, "created_at": 1649080791.510242, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and sum(col_numeric_a) >= 1 and sum(col_numeric_a) <= 3\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_min_to_be_between_data_test_col_numeric_a__0__0.0b9263ab44": {"raw_sql": "{{ dbt_expectations.test_expect_column_min_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0f21475a39564b7f0f28389630488e56\") }}", "test_metadata": {"name": "expect_column_min_to_be_between", "kwargs": {"min_value": 0, "max_value": 0, "column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_min_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0f21475a39564b7f0f28389630488e56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_min_to_be_between_data_test_col_numeric_a__0__0"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_min_to_be_between_data_test_col_numeric_a__0__0.0b9263ab44", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_0f21475a39564b7f0f28389630488e56.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_min_to_be_between_data_test_col_numeric_a__0__0", "alias": "dbt_expectations_expect_column_0f21475a39564b7f0f28389630488e56", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_0f21475a39564b7f0f28389630488e56.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0f21475a39564b7f0f28389630488e56"}, "created_at": 1649080791.5178711, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and min(col_numeric_a) >= 0 and min(col_numeric_a) <= 0\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_max_to_be_between_data_test_col_numeric_a__1__1.da51d2d9cb": {"raw_sql": "{{ dbt_expectations.test_expect_column_max_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3e45cc658bb26429cb14265549bb8aa4\") }}", "test_metadata": {"name": "expect_column_max_to_be_between", "kwargs": {"min_value": 1, "max_value": 1, "column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_max_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3e45cc658bb26429cb14265549bb8aa4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_max_to_be_between_data_test_col_numeric_a__1__1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_max_to_be_between_data_test_col_numeric_a__1__1.da51d2d9cb", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_3e45cc658bb26429cb14265549bb8aa4.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_max_to_be_between_data_test_col_numeric_a__1__1", "alias": "dbt_expectations_expect_column_3e45cc658bb26429cb14265549bb8aa4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_3e45cc658bb26429cb14265549bb8aa4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3e45cc658bb26429cb14265549bb8aa4"}, "created_at": 1649080791.524419, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and max(col_numeric_a) >= 1 and max(col_numeric_a) <= 1\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_mean_to_be_between_data_test_col_numeric_a__1_5__0.885aa2d309": {"raw_sql": "{{ dbt_expectations.test_expect_column_mean_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_67c79a4933f6133e5d7dc197aa5ce58c\") }}", "test_metadata": {"name": "expect_column_mean_to_be_between", "kwargs": {"min_value": 0, "max_value": 1.5, "column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_67c79a4933f6133e5d7dc197aa5ce58c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_mean_to_be_between_data_test_col_numeric_a__1_5__0"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_mean_to_be_between_data_test_col_numeric_a__1_5__0.885aa2d309", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_67c79a4933f6133e5d7dc197aa5ce58c.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_mean_to_be_between_data_test_col_numeric_a__1_5__0", "alias": "dbt_expectations_expect_column_67c79a4933f6133e5d7dc197aa5ce58c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_67c79a4933f6133e5d7dc197aa5ce58c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_67c79a4933f6133e5d7dc197aa5ce58c"}, "created_at": 1649080791.531901, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and avg(col_numeric_a) >= 0 and avg(col_numeric_a) <= 1.5\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_unique_value_count_to_be_between_data_test_col_numeric_a__3__3.29365f2765": {"raw_sql": "{{ dbt_expectations.test_expect_column_unique_value_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d615c4d661054a359cf59514a5767d95\") }}", "test_metadata": {"name": "expect_column_unique_value_count_to_be_between", "kwargs": {"min_value": 3, "max_value": 3, "column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d615c4d661054a359cf59514a5767d95", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_unique_value_count_to_be_between_data_test_col_numeric_a__3__3"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_unique_value_count_to_be_between_data_test_col_numeric_a__3__3.29365f2765", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_d615c4d661054a359cf59514a5767d95.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_unique_value_count_to_be_between_data_test_col_numeric_a__3__3", "alias": "dbt_expectations_expect_column_d615c4d661054a359cf59514a5767d95", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_d615c4d661054a359cf59514a5767d95.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d615c4d661054a359cf59514a5767d95"}, "created_at": 1649080791.5384388, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(distinct col_numeric_a) >= 3 and count(distinct col_numeric_a) <= 3\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_proportion_of_unique_values_to_be_between_data_test_col_numeric_a__0_75__0.50b672f9f5": {"raw_sql": "{{ dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aac06c6794794584dc7a7928e0fd4cf4\") }}", "test_metadata": {"name": "expect_column_proportion_of_unique_values_to_be_between", "kwargs": {"min_value": 0, "max_value": 0.75, "column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aac06c6794794584dc7a7928e0fd4cf4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_proportion_of_unique_values_to_be_between_data_test_col_numeric_a__0_75__0"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_proportion_of_unique_values_to_be_between_data_test_col_numeric_a__0_75__0.50b672f9f5", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_aac06c6794794584dc7a7928e0fd4cf4.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_proportion_of_unique_values_to_be_between_data_test_col_numeric_a__0_75__0", "alias": "dbt_expectations_expect_column_aac06c6794794584dc7a7928e0fd4cf4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_aac06c6794794584dc7a7928e0fd4cf4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_aac06c6794794584dc7a7928e0fd4cf4"}, "created_at": 1649080791.545283, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(distinct col_numeric_a)/count(col_numeric_a) >= 0 and count(distinct col_numeric_a)/count(col_numeric_a) <= 0.75\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_stdev_to_be_between_data_test_col_numeric_a__2__0.6aea0941f3": {"raw_sql": "{{ dbt_expectations.test_expect_column_stdev_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d14e75b5d188a5e0fb41411693011f66\") }}", "test_metadata": {"name": "expect_column_stdev_to_be_between", "kwargs": {"min_value": 0, "max_value": 2, "column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d14e75b5d188a5e0fb41411693011f66", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_stdev_to_be_between_data_test_col_numeric_a__2__0"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_stdev_to_be_between_data_test_col_numeric_a__2__0.6aea0941f3", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_d14e75b5d188a5e0fb41411693011f66.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_stdev_to_be_between_data_test_col_numeric_a__2__0", "alias": "dbt_expectations_expect_column_d14e75b5d188a5e0fb41411693011f66", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_d14e75b5d188a5e0fb41411693011f66.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d14e75b5d188a5e0fb41411693011f66"}, "created_at": 1649080791.5526028, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and stddev(col_numeric_a) >= 0 and stddev(col_numeric_a) <= 2\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_stdev_to_be_between_data_test_col_numeric_a__0__True.0828889e83": {"raw_sql": "{{ dbt_expectations.test_expect_column_stdev_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9cb8509d48244202d6fe36303eda94cf\") }}", "test_metadata": {"name": "expect_column_stdev_to_be_between", "kwargs": {"min_value": 0, "strictly": true, "column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9cb8509d48244202d6fe36303eda94cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_stdev_to_be_between_data_test_col_numeric_a__0__True"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_stdev_to_be_between_data_test_col_numeric_a__0__True.0828889e83", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_9cb8509d48244202d6fe36303eda94cf.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_stdev_to_be_between_data_test_col_numeric_a__0__True", "alias": "dbt_expectations_expect_column_9cb8509d48244202d6fe36303eda94cf", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_9cb8509d48244202d6fe36303eda94cf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9cb8509d48244202d6fe36303eda94cf"}, "created_at": 1649080791.5612118, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and stddev(col_numeric_a) > 0\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_most_common_value_to_be_in_set_data_test_col_numeric_a__1__0_5.0c353bf758": {"raw_sql": "{{ dbt_expectations.test_expect_column_most_common_value_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_251ddbc4d6ca6795c8564d815f1e643d\") }}", "test_metadata": {"name": "expect_column_most_common_value_to_be_in_set", "kwargs": {"value_set": [0.5], "top_n": 1, "column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_251ddbc4d6ca6795c8564d815f1e643d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_most_common_value_to_be_in_set_data_test_col_numeric_a__1__0_5"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_most_common_value_to_be_in_set_data_test_col_numeric_a__1__0_5.0c353bf758", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_251ddbc4d6ca6795c8564d815f1e643d.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_most_common_value_to_be_in_set_data_test_col_numeric_a__1__0_5", "alias": "dbt_expectations_expect_column_251ddbc4d6ca6795c8564d815f1e643d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_251ddbc4d6ca6795c8564d815f1e643d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_251ddbc4d6ca6795c8564d815f1e643d"}, "created_at": 1649080791.5661912, "compiled_sql": "\n\nwith value_counts as (\n\n    select\n        cast(col_numeric_a as decimal) as value_field,\n        count(*) as value_count\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n    group by cast(col_numeric_a as decimal)\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = 1\n\n),\nset_values as (\n\n    select\n        cast(0.5 as decimal) as value_field\n    \n    \n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_data_test_col_numeric_a__col_numeric_a__False.275c036446": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_increasing(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f25d743864680a14bcbd0ad4616d5adb\") }}", "test_metadata": {"name": "expect_column_values_to_be_increasing", "kwargs": {"sort_column": "col_numeric_a", "strictly": false, "column_name": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f25d743864680a14bcbd0ad4616d5adb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_increasing_data_test_col_numeric_a__col_numeric_a__False"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_data_test_col_numeric_a__col_numeric_a__False.275c036446", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_f25d743864680a14bcbd0ad4616d5adb.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_increasing_data_test_col_numeric_a__col_numeric_a__False", "alias": "dbt_expectations_expect_column_f25d743864680a14bcbd0ad4616d5adb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_f25d743864680a14bcbd0ad4616d5adb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f25d743864680a14bcbd0ad4616d5adb"}, "created_at": 1649080791.5775151, "compiled_sql": "with all_values as (\n\n    select\n        col_numeric_a as sort_column,\n        col_numeric_a as value_field\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over(order by sort_column) as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field >= value_field_lag)\n\n)\nselect *\nfrom validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_numeric_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_set_data_test_col_string_a__True__a__b__c.0d9c524932": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e22f43aabfaf6796be1cb5d13fefe096\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["a", "b", "c"], "quote_values": true, "column_name": "col_string_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e22f43aabfaf6796be1cb5d13fefe096", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_in_set_data_test_col_string_a__True__a__b__c"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_set_data_test_col_string_a__True__a__b__c.0d9c524932", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_e22f43aabfaf6796be1cb5d13fefe096.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_data_test_col_string_a__True__a__b__c", "alias": "dbt_expectations_expect_column_e22f43aabfaf6796be1cb5d13fefe096", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_e22f43aabfaf6796be1cb5d13fefe096.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e22f43aabfaf6796be1cb5d13fefe096"}, "created_at": 1649080791.5825028, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        col_string_a as value_field\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nset_values as (\n\n    select\n        cast('a' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('b' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('c' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_string_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_in_set_data_test_col_string_a__True__2__3.bba7663cef": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_not_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bf6e306da971dd490618afe3d21ef442\") }}", "test_metadata": {"name": "expect_column_values_to_not_be_in_set", "kwargs": {"value_set": ["2", "3"], "quote_values": true, "column_name": "col_string_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bf6e306da971dd490618afe3d21ef442", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_not_be_in_set_data_test_col_string_a__True__2__3"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_in_set_data_test_col_string_a__True__2__3.bba7663cef", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_bf6e306da971dd490618afe3d21ef442.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_not_be_in_set_data_test_col_string_a__True__2__3", "alias": "dbt_expectations_expect_column_bf6e306da971dd490618afe3d21ef442", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_bf6e306da971dd490618afe3d21ef442.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_bf6e306da971dd490618afe3d21ef442"}, "created_at": 1649080791.590446, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        col_string_a as value_field\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nset_values as (\n\n    select\n        cast('2' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('3' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_string_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_equal_set_data_test_col_string_a__True__a__b__c__c.351d3e42e2": {"raw_sql": "{{ dbt_expectations.test_expect_column_distinct_values_to_equal_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_10c0f019d10a19bf6df858ec8aebe296\") }}", "test_metadata": {"name": "expect_column_distinct_values_to_equal_set", "kwargs": {"value_set": ["a", "b", "c", "c"], "quote_values": true, "column_name": "col_string_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_10c0f019d10a19bf6df858ec8aebe296", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_distinct_values_to_equal_set_data_test_col_string_a__True__a__b__c__c"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_equal_set_data_test_col_string_a__True__a__b__c__c.351d3e42e2", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_10c0f019d10a19bf6df858ec8aebe296.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_distinct_values_to_equal_set_data_test_col_string_a__True__a__b__c__c", "alias": "dbt_expectations_expect_column_10c0f019d10a19bf6df858ec8aebe296", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_10c0f019d10a19bf6df858ec8aebe296.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_10c0f019d10a19bf6df858ec8aebe296"}, "created_at": 1649080791.598738, "compiled_sql": "\n\nwith all_values as (\n\n    select distinct\n        col_string_a as column_value\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nset_values as (\n\n    select\n        'a' as value_field\n    union all\n    select\n        'b' as value_field\n    union all\n    select\n        'c' as value_field\n    union all\n    select\n        'c' as value_field\n    \n    \n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_string_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_be_in_set_data_test_col_string_a__True__a__b__c__d.ba496b564d": {"raw_sql": "{{ dbt_expectations.test_expect_column_distinct_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0f9218728f5bbfe5e441a3bca5addea1\") }}", "test_metadata": {"name": "expect_column_distinct_values_to_be_in_set", "kwargs": {"value_set": ["a", "b", "c", "d"], "quote_values": true, "column_name": "col_string_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0f9218728f5bbfe5e441a3bca5addea1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_distinct_values_to_be_in_set_data_test_col_string_a__True__a__b__c__d"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_be_in_set_data_test_col_string_a__True__a__b__c__d.ba496b564d", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_0f9218728f5bbfe5e441a3bca5addea1.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_distinct_values_to_be_in_set_data_test_col_string_a__True__a__b__c__d", "alias": "dbt_expectations_expect_column_0f9218728f5bbfe5e441a3bca5addea1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_0f9218728f5bbfe5e441a3bca5addea1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0f9218728f5bbfe5e441a3bca5addea1"}, "created_at": 1649080791.606865, "compiled_sql": "\n\nwith all_values as (\n\n    select distinct\n        col_string_a as value_field\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nset_values as (\n\n    select\n        'a' as value_field\n    union all\n    select\n        'b' as value_field\n    union all\n    select\n        'c' as value_field\n    union all\n    select\n        'd' as value_field\n    \n    \n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_string_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_contain_set_data_test_col_string_a__True__a__b.cb3359e163": {"raw_sql": "{{ dbt_expectations.test_expect_column_distinct_values_to_contain_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a09f887d8761d655adc9ca7cba0e6823\") }}", "test_metadata": {"name": "expect_column_distinct_values_to_contain_set", "kwargs": {"value_set": ["a", "b"], "quote_values": true, "column_name": "col_string_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a09f887d8761d655adc9ca7cba0e6823", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_distinct_values_to_contain_set_data_test_col_string_a__True__a__b"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_contain_set_data_test_col_string_a__True__a__b.cb3359e163", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_a09f887d8761d655adc9ca7cba0e6823.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_distinct_values_to_contain_set_data_test_col_string_a__True__a__b", "alias": "dbt_expectations_expect_column_a09f887d8761d655adc9ca7cba0e6823", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_a09f887d8761d655adc9ca7cba0e6823.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a09f887d8761d655adc9ca7cba0e6823"}, "created_at": 1649080791.6171288, "compiled_sql": "\n\nwith all_values as (\n\n    select distinct\n        col_string_a as value_field\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nset_values as (\n\n    select\n        'a' as value_field\n    union all\n    select\n        'b' as value_field\n    \n    \n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_string_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_equal_data_test_col_string_a__1.914eeb47db": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d411e1248ff185e2ba281a42b356ef2d\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 1, "column_name": "col_string_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d411e1248ff185e2ba281a42b356ef2d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_value_lengths_to_equal_data_test_col_string_a__1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_equal_data_test_col_string_a__1.914eeb47db", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_d411e1248ff185e2ba281a42b356ef2d.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_data_test_col_string_a__1", "alias": "dbt_expectations_expect_column_d411e1248ff185e2ba281a42b356ef2d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_d411e1248ff185e2ba281a42b356ef2d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d411e1248ff185e2ba281a42b356ef2d"}, "created_at": 1649080791.6243331, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        col_string_a\n    ) = 1 as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_string_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_have_consistent_casing_data_test_col_string_a.97aaa47da3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_have_consistent_casing(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3373c8840b5bda2e8b8ee904946b5447\") }}", "test_metadata": {"name": "expect_column_values_to_have_consistent_casing", "kwargs": {"column_name": "col_string_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3373c8840b5bda2e8b8ee904946b5447", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_have_consistent_casing_data_test_col_string_a"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_have_consistent_casing_data_test_col_string_a.97aaa47da3", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_3373c8840b5bda2e8b8ee904946b5447.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_have_consistent_casing_data_test_col_string_a", "alias": "dbt_expectations_expect_column_3373c8840b5bda2e8b8ee904946b5447", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_3373c8840b5bda2e8b8ee904946b5447.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3373c8840b5bda2e8b8ee904946b5447"}, "created_at": 1649080791.6330628, "compiled_sql": "\n\nwith test_data as (\n\n    select\n        distinct col_string_a as distinct_values\n    from\n        postgres.dbt_expectations_integration_tests.data_test\n\n ),\n \n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_string_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_have_consistent_casing_data_test_col_string_a__True.dbf8671a4f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_have_consistent_casing(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_06c0c4c370e8c17e0abba946df1269bf\") }}", "test_metadata": {"name": "expect_column_values_to_have_consistent_casing", "kwargs": {"display_inconsistent_columns": true, "column_name": "col_string_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_06c0c4c370e8c17e0abba946df1269bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_have_consistent_casing_data_test_col_string_a__True"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_have_consistent_casing_data_test_col_string_a__True.dbf8671a4f", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_06c0c4c370e8c17e0abba946df1269bf.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_have_consistent_casing_data_test_col_string_a__True", "alias": "dbt_expectations_expect_column_06c0c4c370e8c17e0abba946df1269bf", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_06c0c4c370e8c17e0abba946df1269bf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_06c0c4c370e8c17e0abba946df1269bf"}, "created_at": 1649080791.63814, "compiled_sql": "\n\nwith test_data as (\n\n    select\n        distinct col_string_a as distinct_values\n    from\n        postgres.dbt_expectations_integration_tests.data_test\n\n ),\n \n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_string_a", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_in_set_data_test_col_string_b__True__a__c.430e7a2045": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_not_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9d36e48a59ac12c3fe063714b1014af3\") }}", "test_metadata": {"name": "expect_column_values_to_not_be_in_set", "kwargs": {"value_set": ["a", "c"], "quote_values": true, "column_name": "col_string_b", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9d36e48a59ac12c3fe063714b1014af3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_not_be_in_set_data_test_col_string_b__True__a__c"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_in_set_data_test_col_string_b__True__a__c.430e7a2045", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_9d36e48a59ac12c3fe063714b1014af3.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_not_be_in_set_data_test_col_string_b__True__a__c", "alias": "dbt_expectations_expect_column_9d36e48a59ac12c3fe063714b1014af3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_9d36e48a59ac12c3fe063714b1014af3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9d36e48a59ac12c3fe063714b1014af3"}, "created_at": 1649080791.641964, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        col_string_b as value_field\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nset_values as (\n\n    select\n        cast('a' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('c' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_string_b", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__4__1.7124d69fa8": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_18ea00e7c2c407d961bbe43497babdb8\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_be_between", "kwargs": {"min_value": 1, "max_value": 4, "column_name": "col_string_b", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_18ea00e7c2c407d961bbe43497babdb8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__4__1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__4__1.7124d69fa8", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_18ea00e7c2c407d961bbe43497babdb8.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__4__1", "alias": "dbt_expectations_expect_column_18ea00e7c2c407d961bbe43497babdb8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_18ea00e7c2c407d961bbe43497babdb8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_18ea00e7c2c407d961bbe43497babdb8"}, "created_at": 1649080791.6470149, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        col_string_b\n    ) >= 1 and length(\n        col_string_b\n    ) <= 4\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_string_b", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__1.11ec77adb3": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3a97dc7d90dbd140877bdf1e7ca32c50\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_be_between", "kwargs": {"min_value": 1, "column_name": "col_string_b", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3a97dc7d90dbd140877bdf1e7ca32c50", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__1.11ec77adb3", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_3a97dc7d90dbd140877bdf1e7ca32c50.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__1", "alias": "dbt_expectations_expect_column_3a97dc7d90dbd140877bdf1e7ca32c50", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_3a97dc7d90dbd140877bdf1e7ca32c50.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3a97dc7d90dbd140877bdf1e7ca32c50"}, "created_at": 1649080791.654151, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        col_string_b\n    ) >= 1\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_string_b", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__4.c9921ddc5a": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_91dc2f6ab48783ee3a3a50b00105dba8\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_be_between", "kwargs": {"max_value": 4, "column_name": "col_string_b", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_91dc2f6ab48783ee3a3a50b00105dba8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__4"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__4.c9921ddc5a", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_91dc2f6ab48783ee3a3a50b00105dba8.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__4", "alias": "dbt_expectations_expect_column_91dc2f6ab48783ee3a3a50b00105dba8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_91dc2f6ab48783ee3a3a50b00105dba8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_91dc2f6ab48783ee3a3a50b00105dba8"}, "created_at": 1649080791.6585531, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        col_string_b\n    ) <= 4\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_string_b", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_null_data_test_col_null.0be3aa326a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_09d218d0d3d99cf85d4a97f1ab36f3fa\") }}", "test_metadata": {"name": "expect_column_values_to_be_null", "kwargs": {"column_name": "col_null", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_09d218d0d3d99cf85d4a97f1ab36f3fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_null_data_test_col_null"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_null_data_test_col_null.0be3aa326a", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_09d218d0d3d99cf85d4a97f1ab36f3fa.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_null_data_test_col_null", "alias": "dbt_expectations_expect_column_09d218d0d3d99cf85d4a97f1ab36f3fa", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_09d218d0d3d99cf85d4a97f1ab36f3fa.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_09d218d0d3d99cf85d4a97f1ab36f3fa"}, "created_at": 1649080791.663334, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  col_null is null as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "col_null", "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_compound_columns_to_be_unique_data_test_date_col__col_string_b__any_value_is_missing.6809061372": {"raw_sql": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_771defe3ac738795eee3164f4d87f367\") }}", "test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["date_col", "col_string_b"], "ignore_row_if": "any_value_is_missing", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_771defe3ac738795eee3164f4d87f367", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_compound_columns_to_be_unique_data_test_date_col__col_string_b__any_value_is_missing"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_compound_columns_to_be_unique_data_test_date_col__col_string_b__any_value_is_missing.6809061372", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_compou_771defe3ac738795eee3164f4d87f367.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_compound_columns_to_be_unique_data_test_date_col__col_string_b__any_value_is_missing", "alias": "dbt_expectations_expect_compou_771defe3ac738795eee3164f4d87f367", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_compou_771defe3ac738795eee3164f4d87f367.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_771defe3ac738795eee3164f4d87f367"}, "created_at": 1649080791.669921, "compiled_sql": "\n\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_col,col_string_b\n    from postgres.dbt_expectations_integration_tests.data_test\n    where 1=1\n    \n    group by\n        date_col,col_string_b\n    having count(*) > 1\n\n)\nselect * from validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_data_test_4.0893914b47": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_equal(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_table_row_count_to_equal", "kwargs": {"value": 4, "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_row_count_to_equal_data_test_4"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_data_test_4.0893914b47", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table_row_count_to_equal_data_test_4.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_row_count_to_equal_data_test_4", "alias": "dbt_expectations_expect_table_row_count_to_equal_data_test_4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table_row_count_to_equal_data_test_4.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649080791.674743, "compiled_sql": "\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \ncount(*) = 4\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_4__1.68b3ca52d7": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__6b26b61d6d1e8a6cf638953327d27463\") }}", "test_metadata": {"name": "expect_table_row_count_to_be_between", "kwargs": {"min_value": 1, "max_value": 4, "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__6b26b61d6d1e8a6cf638953327d27463", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_row_count_to_be_between_data_test_4__1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_4__1.68b3ca52d7", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__6b26b61d6d1e8a6cf638953327d27463.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_row_count_to_be_between_data_test_4__1", "alias": "dbt_expectations_expect_table__6b26b61d6d1e8a6cf638953327d27463", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__6b26b61d6d1e8a6cf638953327d27463.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__6b26b61d6d1e8a6cf638953327d27463"}, "created_at": 1649080791.682528, "compiled_sql": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 4\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_1.2707fd03e7": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__73ef10f9f7d8dee7720cb8ebe2e37fca\") }}", "test_metadata": {"name": "expect_table_row_count_to_be_between", "kwargs": {"min_value": 1, "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__73ef10f9f7d8dee7720cb8ebe2e37fca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_row_count_to_be_between_data_test_1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_1.2707fd03e7", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__73ef10f9f7d8dee7720cb8ebe2e37fca.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_row_count_to_be_between_data_test_1", "alias": "dbt_expectations_expect_table__73ef10f9f7d8dee7720cb8ebe2e37fca", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__73ef10f9f7d8dee7720cb8ebe2e37fca.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__73ef10f9f7d8dee7720cb8ebe2e37fca"}, "created_at": 1649080791.6892412, "compiled_sql": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_4.740d584f1d": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__e6e699c05ec7a4b454cbc852ff49db08\") }}", "test_metadata": {"name": "expect_table_row_count_to_be_between", "kwargs": {"max_value": 4, "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__e6e699c05ec7a4b454cbc852ff49db08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_row_count_to_be_between_data_test_4"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_4.740d584f1d", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__e6e699c05ec7a4b454cbc852ff49db08.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_row_count_to_be_between_data_test_4", "alias": "dbt_expectations_expect_table__e6e699c05ec7a4b454cbc852ff49db08", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__e6e699c05ec7a4b454cbc852ff49db08.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__e6e699c05ec7a4b454cbc852ff49db08"}, "created_at": 1649080791.693457, "compiled_sql": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) <= 4\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_other_table_data_test_ref_data_test___1_1__1_1.bb1a037ebc": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__a465b53c9fff2c5dfb05a08186151923\") }}", "test_metadata": {"name": "expect_table_row_count_to_equal_other_table", "kwargs": {"compare_model": "ref(\"data_test\")", "row_condition": "1=1", "compare_row_condition": "1=1", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test", "model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__a465b53c9fff2c5dfb05a08186151923", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_row_count_to_equal_other_table_data_test_ref_data_test___1_1__1_1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_other_table_data_test_ref_data_test___1_1__1_1.bb1a037ebc", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__a465b53c9fff2c5dfb05a08186151923.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_row_count_to_equal_other_table_data_test_ref_data_test___1_1__1_1", "alias": "dbt_expectations_expect_table__a465b53c9fff2c5dfb05a08186151923", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"], ["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__a465b53c9fff2c5dfb05a08186151923.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__a465b53c9fff2c5dfb05a08186151923"}, "created_at": 1649080791.698664, "compiled_sql": "\n    with a as (\n        \n    select\n        \n        count(*) as expression\n    from\n        postgres.dbt_expectations_integration_tests.data_test\n    where\n        1=1\n    \n    \n\n    ),\n    b as (\n        \n    select\n        \n        count(*) * 1 as expression\n    from\n        postgres.dbt_expectations_integration_tests.data_test\n    where\n        1=1\n    \n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_equal_data_test_7.552fe2a555": {"raw_sql": "{{ dbt_expectations.test_expect_table_column_count_to_equal(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_table_column_count_to_equal", "kwargs": {"value": 7, "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_column_count_to_equal_data_test_7"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_equal_data_test_7.552fe2a555", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table_column_count_to_equal_data_test_7.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_column_count_to_equal_data_test_7", "alias": "dbt_expectations_expect_table_column_count_to_equal_data_test_7", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table_column_count_to_equal_data_test_7.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649080791.7060301, "compiled_sql": "with test_data as (\n\n    select\n        7 as number_actual_columns,\n        7 as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_10__1.31fd1ecbff": {"raw_sql": "{{ dbt_expectations.test_expect_table_column_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__201b7d719f09d1a58472ee81604bc59f\") }}", "test_metadata": {"name": "expect_table_column_count_to_be_between", "kwargs": {"min_value": 1, "max_value": 10, "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__201b7d719f09d1a58472ee81604bc59f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_column_count_to_be_between_data_test_10__1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_10__1.31fd1ecbff", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__201b7d719f09d1a58472ee81604bc59f.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_column_count_to_be_between_data_test_10__1", "alias": "dbt_expectations_expect_table__201b7d719f09d1a58472ee81604bc59f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__201b7d719f09d1a58472ee81604bc59f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__201b7d719f09d1a58472ee81604bc59f"}, "created_at": 1649080791.711179, "compiled_sql": "with test_data as (\n\n    select\n        7 as number_actual_columns,\n        1 as min_value,\n        10 as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not \n( 1=1 and number_actual_columns >= min_value and number_actual_columns <= max_value\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_1.81327d9e76": {"raw_sql": "{{ dbt_expectations.test_expect_table_column_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__cca8b07a5019c1773be4b15221ab76d6\") }}", "test_metadata": {"name": "expect_table_column_count_to_be_between", "kwargs": {"min_value": 1, "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__cca8b07a5019c1773be4b15221ab76d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_column_count_to_be_between_data_test_1"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_1.81327d9e76", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__cca8b07a5019c1773be4b15221ab76d6.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_column_count_to_be_between_data_test_1", "alias": "dbt_expectations_expect_table__cca8b07a5019c1773be4b15221ab76d6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__cca8b07a5019c1773be4b15221ab76d6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__cca8b07a5019c1773be4b15221ab76d6"}, "created_at": 1649080791.718823, "compiled_sql": "with test_data as (\n\n    select\n        7 as number_actual_columns,\n        1 as min_value,\n        0 as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not \n( 1=1 and number_actual_columns >= min_value\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_10.53e3f2be23": {"raw_sql": "{{ dbt_expectations.test_expect_table_column_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__821193c730d0f28fd1cd9fc7a1b47115\") }}", "test_metadata": {"name": "expect_table_column_count_to_be_between", "kwargs": {"max_value": 10, "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__821193c730d0f28fd1cd9fc7a1b47115", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_column_count_to_be_between_data_test_10"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_10.53e3f2be23", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__821193c730d0f28fd1cd9fc7a1b47115.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_column_count_to_be_between_data_test_10", "alias": "dbt_expectations_expect_table__821193c730d0f28fd1cd9fc7a1b47115", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__821193c730d0f28fd1cd9fc7a1b47115.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__821193c730d0f28fd1cd9fc7a1b47115"}, "created_at": 1649080791.722705, "compiled_sql": "with test_data as (\n\n    select\n        7 as number_actual_columns,\n        0 as min_value,\n        10 as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not \n( 1=1 and number_actual_columns <= max_value\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_contain_set_data_test_col_numeric_b__col_string_a.428ef19067": {"raw_sql": "{{ dbt_expectations.test_expect_table_columns_to_contain_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__2c8154b0d8ece670be3f3d047fdd3db5\") }}", "test_metadata": {"name": "expect_table_columns_to_contain_set", "kwargs": {"column_list": ["col_numeric_b", "col_string_a"], "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__2c8154b0d8ece670be3f3d047fdd3db5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_columns_to_contain_set_data_test_col_numeric_b__col_string_a"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_contain_set_data_test_col_numeric_b__col_string_a.428ef19067", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__2c8154b0d8ece670be3f3d047fdd3db5.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_columns_to_contain_set_data_test_col_numeric_b__col_string_a", "alias": "dbt_expectations_expect_table__2c8154b0d8ece670be3f3d047fdd3db5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__2c8154b0d8ece670be3f3d047fdd3db5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__2c8154b0d8ece670be3f3d047fdd3db5"}, "created_at": 1649080791.726445, "compiled_sql": "with relation_columns as (\n\n        \n        select cast('IDX' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('DATE_COL' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_NUMERIC_A' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_NUMERIC_B' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_STRING_A' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_STRING_B' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_NULL' as \n    varchar\n) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('COL_NUMERIC_B' as \n    varchar\n) as input_column\n        union all\n        \n        select cast('COL_STRING_A' as \n    varchar\n) as input_column\n        \n        \n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_set_data_test_idx__date_col__col_numeric_a__col_numeric_b__col_string_a__col_string_b__col_null.43007c4dca": {"raw_sql": "{{ dbt_expectations.test_expect_table_columns_to_match_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__748d8ef68b7b77740e48848bbae1f5e3\") }}", "test_metadata": {"name": "expect_table_columns_to_match_set", "kwargs": {"column_list": ["idx", "date_col", "col_numeric_a", "col_numeric_b", "col_string_a", "col_string_b", "col_null"], "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__748d8ef68b7b77740e48848bbae1f5e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_columns_to_match_set_data_test_idx__date_col__col_numeric_a__col_numeric_b__col_string_a__col_string_b__col_null"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_set_data_test_idx__date_col__col_numeric_a__col_numeric_b__col_string_a__col_string_b__col_null.43007c4dca", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__748d8ef68b7b77740e48848bbae1f5e3.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_columns_to_match_set_data_test_idx__date_col__col_numeric_a__col_numeric_b__col_string_a__col_string_b__col_null", "alias": "dbt_expectations_expect_table__748d8ef68b7b77740e48848bbae1f5e3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__748d8ef68b7b77740e48848bbae1f5e3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__748d8ef68b7b77740e48848bbae1f5e3"}, "created_at": 1649080791.735646, "compiled_sql": "with relation_columns as (\n\n        \n        select cast('IDX' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('DATE_COL' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_NUMERIC_A' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_NUMERIC_B' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_STRING_A' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_STRING_B' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_NULL' as \n    varchar\n) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('IDX' as \n    varchar\n) as input_column\n        union all\n        \n        select cast('DATE_COL' as \n    varchar\n) as input_column\n        union all\n        \n        select cast('COL_NUMERIC_A' as \n    varchar\n) as input_column\n        union all\n        \n        select cast('COL_NUMERIC_B' as \n    varchar\n) as input_column\n        union all\n        \n        select cast('COL_STRING_A' as \n    varchar\n) as input_column\n        union all\n        \n        select cast('COL_STRING_B' as \n    varchar\n) as input_column\n        union all\n        \n        select cast('COL_NULL' as \n    varchar\n) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_data_test_idx__date_col__col_numeric_a__col_numeric_b__col_string_a__col_string_b__col_null.847d680085": {"raw_sql": "{{ dbt_expectations.test_expect_table_columns_to_match_ordered_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__2cb530c665a8cf00ce1964d02e863282\") }}", "test_metadata": {"name": "expect_table_columns_to_match_ordered_list", "kwargs": {"column_list": ["idx", "date_col", "col_numeric_a", "col_numeric_b", "col_string_a", "col_string_b", "col_null"], "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__2cb530c665a8cf00ce1964d02e863282", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_columns_to_match_ordered_list_data_test_idx__date_col__col_numeric_a__col_numeric_b__col_string_a__col_string_b__col_null"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_data_test_idx__date_col__col_numeric_a__col_numeric_b__col_string_a__col_string_b__col_null.847d680085", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__2cb530c665a8cf00ce1964d02e863282.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_columns_to_match_ordered_list_data_test_idx__date_col__col_numeric_a__col_numeric_b__col_string_a__col_string_b__col_null", "alias": "dbt_expectations_expect_table__2cb530c665a8cf00ce1964d02e863282", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__2cb530c665a8cf00ce1964d02e863282.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__2cb530c665a8cf00ce1964d02e863282"}, "created_at": 1649080791.7458339, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('IDX' as \n    varchar\n) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('DATE_COL' as \n    varchar\n) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('COL_NUMERIC_A' as \n    varchar\n) as relation_column\n        union all\n        \n        select\n            4 as relation_column_idx,\n            cast('COL_NUMERIC_B' as \n    varchar\n) as relation_column\n        union all\n        \n        select\n            5 as relation_column_idx,\n            cast('COL_STRING_A' as \n    varchar\n) as relation_column\n        union all\n        \n        select\n            6 as relation_column_idx,\n            cast('COL_STRING_B' as \n    varchar\n) as relation_column\n        union all\n        \n        select\n            7 as relation_column_idx,\n            cast('COL_NULL' as \n    varchar\n) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('IDX' as \n    varchar\n) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('DATE_COL' as \n    varchar\n) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('COL_NUMERIC_A' as \n    varchar\n) as input_column\n        union all\n        \n        select\n            4 as input_column_idx,\n            cast('COL_NUMERIC_B' as \n    varchar\n) as input_column\n        union all\n        \n        select\n            5 as input_column_idx,\n            cast('COL_STRING_A' as \n    varchar\n) as input_column\n        union all\n        \n        select\n            6 as input_column_idx,\n            cast('COL_STRING_B' as \n    varchar\n) as input_column\n        union all\n        \n        select\n            7 as input_column_idx,\n            cast('COL_NULL' as \n    varchar\n) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_equal_other_table_data_test_ref_data_test_.47d89a52cb": {"raw_sql": "{{ dbt_expectations.test_expect_table_column_count_to_equal_other_table(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__429bfd357eb524914b55a0149c3b4e32\") }}", "test_metadata": {"name": "expect_table_column_count_to_equal_other_table", "kwargs": {"compare_model": "ref(\"data_test\")", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test", "model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__429bfd357eb524914b55a0149c3b4e32", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_column_count_to_equal_other_table_data_test_ref_data_test_"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_equal_other_table_data_test_ref_data_test_.47d89a52cb", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__429bfd357eb524914b55a0149c3b4e32.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_column_count_to_equal_other_table_data_test_ref_data_test_", "alias": "dbt_expectations_expect_table__429bfd357eb524914b55a0149c3b4e32", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"], ["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__429bfd357eb524914b55a0149c3b4e32.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__429bfd357eb524914b55a0149c3b4e32"}, "created_at": 1649080791.753284, "compiled_sql": "with test_data as (\n\n    select\n        7 as number_columns,\n        7 as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_not_contain_set_data_test_col_numeric_c__col_string_d.d79c96d480": {"raw_sql": "{{ dbt_expectations.test_expect_table_columns_to_not_contain_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__fe8569d774ce6161e70a64ebec37bf93\") }}", "test_metadata": {"name": "expect_table_columns_to_not_contain_set", "kwargs": {"column_list": ["col_numeric_c", "col_string_d"], "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__fe8569d774ce6161e70a64ebec37bf93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_columns_to_not_contain_set_data_test_col_numeric_c__col_string_d"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_not_contain_set_data_test_col_numeric_c__col_string_d.d79c96d480", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__fe8569d774ce6161e70a64ebec37bf93.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_columns_to_not_contain_set_data_test_col_numeric_c__col_string_d", "alias": "dbt_expectations_expect_table__fe8569d774ce6161e70a64ebec37bf93", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__fe8569d774ce6161e70a64ebec37bf93.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__fe8569d774ce6161e70a64ebec37bf93"}, "created_at": 1649080791.759367, "compiled_sql": "with relation_columns as (\n\n        \n        select cast('IDX' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('DATE_COL' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_NUMERIC_A' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_NUMERIC_B' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_STRING_A' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_STRING_B' as \n    varchar\n) as relation_column\n        union all\n        \n        select cast('COL_NULL' as \n    varchar\n) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('COL_NUMERIC_C' as \n    varchar\n) as input_column\n        union all\n        \n        select cast('COL_STRING_D' as \n    varchar\n) as input_column\n        \n        \n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expression_is_true_data_test__col_numeric_a_col_numeric_b_1_.72e60a34af": {"raw_sql": "{{ dbt_expectations.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expression_is_2b3df2f34bfbadac00cbf5c1d2fc43b9\") }}", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "(col_numeric_a + col_numeric_b = 1)", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expression_is_2b3df2f34bfbadac00cbf5c1d2fc43b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expression_is_true_data_test__col_numeric_a_col_numeric_b_1_"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expression_is_true_data_test__col_numeric_a_col_numeric_b_1_.72e60a34af", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expression_is_2b3df2f34bfbadac00cbf5c1d2fc43b9.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expression_is_true_data_test__col_numeric_a_col_numeric_b_1_", "alias": "dbt_expectations_expression_is_2b3df2f34bfbadac00cbf5c1d2fc43b9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expression_is_2b3df2f34bfbadac00cbf5c1d2fc43b9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expression_is_2b3df2f34bfbadac00cbf5c1d2fc43b9"}, "created_at": 1649080791.768694, "compiled_sql": "\n\n    \n    with grouped_expression as (\n    select\n        \n        \n    \n  (col_numeric_a + col_numeric_b = 1) as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_ref_data_test___sum_col_numeric_a___idx.b487d295fb": {"raw_sql": "{{ dbt_expectations.test_equal_expression(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_equal_express_0c869ab94c242f93ca627a01f2bf5906\") }}", "test_metadata": {"name": "equal_expression", "kwargs": {"expression": "sum(col_numeric_a)", "compare_model": "ref(\"data_test\")", "group_by": ["idx"], "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test", "model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_equal_express_0c869ab94c242f93ca627a01f2bf5906", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_equal_expression_data_test_ref_data_test___sum_col_numeric_a___idx"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_ref_data_test___sum_col_numeric_a___idx.b487d295fb", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_equal_express_0c869ab94c242f93ca627a01f2bf5906.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_equal_expression_data_test_ref_data_test___sum_col_numeric_a___idx", "alias": "dbt_expectations_equal_express_0c869ab94c242f93ca627a01f2bf5906", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"], ["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_equal_express_0c869ab94c242f93ca627a01f2bf5906.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_equal_express_0c869ab94c242f93ca627a01f2bf5906"}, "created_at": 1649080791.7744179, "compiled_sql": "\n    with a as (\n        \n    select\n        \n        idx as col_1,\n        \n        sum(col_numeric_a) as expression\n    from\n        postgres.dbt_expectations_integration_tests.data_test\n    \n    group by\n        1\n        \n    \n\n    ),\n    b as (\n        \n    select\n        \n        idx as col_1,\n        \n        sum(col_numeric_a) as expression\n    from\n        postgres.dbt_expectations_integration_tests.data_test\n    \n    group by\n        1\n        \n    \n\n    ),\n    final as (\n\n        select\n            coalesce(a.col_1, b.col_1) as col_1,\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a\n            full outer join\n            b on\n            a.col_1 = b.col_1 \n            \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_sum_col_numeric_a_5___ref_data_test___sum_col_numeric_a___idx__0_5.ce68b2893f": {"raw_sql": "{{ dbt_expectations.test_equal_expression(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_equal_express_64b620dd67b7636a374cb58a3d18d1d0\") }}", "test_metadata": {"name": "equal_expression", "kwargs": {"expression": "sum(col_numeric_a)", "compare_expression": "sum(col_numeric_a * .5)", "compare_model": "ref(\"data_test\")", "group_by": ["idx"], "tolerance_percent": 0.5, "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test", "model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_equal_express_64b620dd67b7636a374cb58a3d18d1d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_equal_expression_data_test_sum_col_numeric_a_5___ref_data_test___sum_col_numeric_a___idx__0_5"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_sum_col_numeric_a_5___ref_data_test___sum_col_numeric_a___idx__0_5.ce68b2893f", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_equal_express_64b620dd67b7636a374cb58a3d18d1d0.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_equal_expression_data_test_sum_col_numeric_a_5___ref_data_test___sum_col_numeric_a___idx__0_5", "alias": "dbt_expectations_equal_express_64b620dd67b7636a374cb58a3d18d1d0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"], ["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_equal_express_64b620dd67b7636a374cb58a3d18d1d0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_equal_express_64b620dd67b7636a374cb58a3d18d1d0"}, "created_at": 1649080791.7800431, "compiled_sql": "\n    with a as (\n        \n    select\n        \n        idx as col_1,\n        \n        sum(col_numeric_a) as expression\n    from\n        postgres.dbt_expectations_integration_tests.data_test\n    \n    group by\n        1\n        \n    \n\n    ),\n    b as (\n        \n    select\n        \n        idx as col_1,\n        \n        sum(col_numeric_a * .5) as expression\n    from\n        postgres.dbt_expectations_integration_tests.data_test\n    \n    group by\n        1\n        \n    \n\n    ),\n    final as (\n\n        select\n            coalesce(a.col_1, b.col_1) as col_1,\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a\n            full outer join\n            b on\n            a.col_1 = b.col_1 \n            \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference_percent > 0.5\n        ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_to_be_in_set_data_test_col_numeric_a__col_numeric_b___0_1____1_0____0_5_0_5____0_5_0_5_.fcd2f00790": {"raw_sql": "{{ dbt_expectations.test_expect_column_pair_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aff59f660298ae56e9f051d2aa960871\") }}", "test_metadata": {"name": "expect_column_pair_values_to_be_in_set", "kwargs": {"column_A": "col_numeric_a", "column_B": "col_numeric_b", "value_pairs_set": [[0, 1], [1, 0], [0.5, 0.5], [0.5, 0.5]], "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aff59f660298ae56e9f051d2aa960871", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_pair_values_to_be_in_set_data_test_col_numeric_a__col_numeric_b___0_1____1_0____0_5_0_5____0_5_0_5_"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_to_be_in_set_data_test_col_numeric_a__col_numeric_b___0_1____1_0____0_5_0_5____0_5_0_5_.fcd2f00790", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_aff59f660298ae56e9f051d2aa960871.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_pair_values_to_be_in_set_data_test_col_numeric_a__col_numeric_b___0_1____1_0____0_5_0_5____0_5_0_5_", "alias": "dbt_expectations_expect_column_aff59f660298ae56e9f051d2aa960871", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_aff59f660298ae56e9f051d2aa960871.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_aff59f660298ae56e9f051d2aa960871"}, "created_at": 1649080791.7864819, "compiled_sql": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n(col_numeric_a = 0 and col_numeric_b = 1) or \n\n\n(col_numeric_a = 1 and col_numeric_b = 0) or \n\n\n(col_numeric_a = 0.5 and col_numeric_b = 0.5) or \n\n\n(col_numeric_a = 0.5 and col_numeric_b = 0.5)\n\n\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_sum_col_numeric_b___ref_data_test___sum_col_numeric_a_.674a29f4ac": {"raw_sql": "{{ dbt_expectations.test_equal_expression(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_equal_express_2d20fc726cbd67b460e63b044f84b7cd\") }}", "test_metadata": {"name": "equal_expression", "kwargs": {"expression": "sum(col_numeric_a)", "compare_model": "ref(\"data_test\")", "compare_expression": "sum(col_numeric_b)", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test", "model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_equal_express_2d20fc726cbd67b460e63b044f84b7cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_equal_expression_data_test_sum_col_numeric_b___ref_data_test___sum_col_numeric_a_"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_sum_col_numeric_b___ref_data_test___sum_col_numeric_a_.674a29f4ac", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_equal_express_2d20fc726cbd67b460e63b044f84b7cd.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_equal_expression_data_test_sum_col_numeric_b___ref_data_test___sum_col_numeric_a_", "alias": "dbt_expectations_equal_express_2d20fc726cbd67b460e63b044f84b7cd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"], ["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_equal_express_2d20fc726cbd67b460e63b044f84b7cd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_equal_express_2d20fc726cbd67b460e63b044f84b7cd"}, "created_at": 1649080791.795118, "compiled_sql": "\n    with a as (\n        \n    select\n        \n        sum(col_numeric_a) as expression\n    from\n        postgres.dbt_expectations_integration_tests.data_test\n    \n\n    ),\n    b as (\n        \n    select\n        \n        sum(col_numeric_b) as expression\n    from\n        postgres.dbt_expectations_integration_tests.data_test\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_data_test_col_numeric_a_10__col_numeric_a.95a5cc1fac": {"raw_sql": "{{ dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_59560feb2fa77921ad441cae8ab09d72\") }}", "test_metadata": {"name": "expect_column_pair_values_A_to_be_greater_than_B", "kwargs": {"column_A": "col_numeric_a+10", "column_B": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_59560feb2fa77921ad441cae8ab09d72", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_data_test_col_numeric_a_10__col_numeric_a"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_data_test_col_numeric_a_10__col_numeric_a.95a5cc1fac", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_59560feb2fa77921ad441cae8ab09d72.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_data_test_col_numeric_a_10__col_numeric_a", "alias": "dbt_expectations_expect_column_59560feb2fa77921ad441cae8ab09d72", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_59560feb2fa77921ad441cae8ab09d72.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_59560feb2fa77921ad441cae8ab09d72"}, "created_at": 1649080791.801392, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  col_numeric_a+10 > col_numeric_a as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_data_test_col_numeric_a__col_numeric_a__True.996ee156f4": {"raw_sql": "{{ dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_44a9366fe77aed6550fcacfb7cc320c3\") }}", "test_metadata": {"name": "expect_column_pair_values_A_to_be_greater_than_B", "kwargs": {"column_A": "col_numeric_a", "column_B": "col_numeric_a", "or_equal": true, "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_44a9366fe77aed6550fcacfb7cc320c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_data_test_col_numeric_a__col_numeric_a__True"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_data_test_col_numeric_a__col_numeric_a__True.996ee156f4", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_44a9366fe77aed6550fcacfb7cc320c3.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_data_test_col_numeric_a__col_numeric_a__True", "alias": "dbt_expectations_expect_column_44a9366fe77aed6550fcacfb7cc320c3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_44a9366fe77aed6550fcacfb7cc320c3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_44a9366fe77aed6550fcacfb7cc320c3"}, "created_at": 1649080791.808118, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  col_numeric_a >= col_numeric_a as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_to_be_equal_data_test_col_numeric_a__col_numeric_a.6237de7ec0": {"raw_sql": "{{ dbt_expectations.test_expect_column_pair_values_to_be_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f00413c4b5b21f6942adc59a9d99b53d\") }}", "test_metadata": {"name": "expect_column_pair_values_to_be_equal", "kwargs": {"column_A": "col_numeric_a", "column_B": "col_numeric_a", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f00413c4b5b21f6942adc59a9d99b53d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_pair_values_to_be_equal_data_test_col_numeric_a__col_numeric_a"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_to_be_equal_data_test_col_numeric_a__col_numeric_a.6237de7ec0", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_f00413c4b5b21f6942adc59a9d99b53d.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_pair_values_to_be_equal_data_test_col_numeric_a__col_numeric_a", "alias": "dbt_expectations_expect_column_f00413c4b5b21f6942adc59a9d99b53d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_f00413c4b5b21f6942adc59a9d99b53d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f00413c4b5b21f6942adc59a9d99b53d"}, "created_at": 1649080791.8131142, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  col_numeric_a = col_numeric_a as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_select_column_values_to_be_unique_within_record_data_test_col_string_a__col_string_b__any_value_is_missing.4673d37284": {"raw_sql": "{{ dbt_expectations.test_expect_select_column_values_to_be_unique_within_record(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_select_37680c45720b064bdf2b91b72f28ef84\") }}", "test_metadata": {"name": "expect_select_column_values_to_be_unique_within_record", "kwargs": {"column_list": ["col_string_a", "col_string_b"], "ignore_row_if": "any_value_is_missing", "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_select_37680c45720b064bdf2b91b72f28ef84", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_select_column_values_to_be_unique_within_record_data_test_col_string_a__col_string_b__any_value_is_missing"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_select_column_values_to_be_unique_within_record_data_test_col_string_a__col_string_b__any_value_is_missing.4673d37284", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_select_37680c45720b064bdf2b91b72f28ef84.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_select_column_values_to_be_unique_within_record_data_test_col_string_a__col_string_b__any_value_is_missing", "alias": "dbt_expectations_expect_select_37680c45720b064bdf2b91b72f28ef84", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_select_37680c45720b064bdf2b91b72f28ef84.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_select_37680c45720b064bdf2b91b72f28ef84"}, "created_at": 1649080791.820514, "compiled_sql": "\n\n\n\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        col_string_a,col_string_b\n    from postgres.dbt_expectations_integration_tests.data_test\n    where 1=1\n    \n    \n        and\n        (\n            col_string_a is not null or col_string_b is not null\n        )\n    \n\n),\nunpivot_columns as (\n\n    \n    select row_index, 'col_string_a' as column_name, col_string_a as column_value from column_values\n    union all\n    \n    select row_index, 'col_string_b' as column_name, col_string_b as column_value from column_values\n    \n    \n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < 2\n\n)\nselect * from validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_multicolumn_sum_to_equal_data_test_col_numeric_a__col_numeric_b__4.491d71e071": {"raw_sql": "{{ dbt_expectations.test_expect_multicolumn_sum_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_multic_7041b60d4b075d2c2aa482c6052d6416\") }}", "test_metadata": {"name": "expect_multicolumn_sum_to_equal", "kwargs": {"column_list": ["col_numeric_a", "col_numeric_b"], "sum_total": 4, "model": "{{ get_where_subquery(ref('data_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_multic_7041b60d4b075d2c2aa482c6052d6416", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_multicolumn_sum_to_equal_data_test_col_numeric_a__col_numeric_b__4"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_multicolumn_sum_to_equal_data_test_col_numeric_a__col_numeric_b__4.491d71e071", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_multic_7041b60d4b075d2c2aa482c6052d6416.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_multicolumn_sum_to_equal_data_test_col_numeric_a__col_numeric_b__4", "alias": "dbt_expectations_expect_multic_7041b60d4b075d2c2aa482c6052d6416", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_multic_7041b60d4b075d2c2aa482c6052d6416.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_multic_7041b60d4b075d2c2aa482c6052d6416"}, "created_at": 1649080791.834975, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\nsum(col_numeric_a) + \n\nsum(col_numeric_b)\n = 4\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.data_test\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_other_table_times_factor_data_test_factored_ref_data_test___2.297ec8375e": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__c7e6600647351029a4492709e1d58dd2\") }}", "test_metadata": {"name": "expect_table_row_count_to_equal_other_table_times_factor", "kwargs": {"compare_model": "ref(\"data_test\")", "factor": 2, "model": "{{ get_where_subquery(ref('data_test_factored')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.data_test", "model.dbt_expectations_integration_tests.data_test_factored"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__c7e6600647351029a4492709e1d58dd2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_row_count_to_equal_other_table_times_factor_data_test_factored_ref_data_test___2"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_other_table_times_factor_data_test_factored_ref_data_test___2.297ec8375e", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__c7e6600647351029a4492709e1d58dd2.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_row_count_to_equal_other_table_times_factor_data_test_factored_ref_data_test___2", "alias": "dbt_expectations_expect_table__c7e6600647351029a4492709e1d58dd2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_test"], ["data_test_factored"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__c7e6600647351029a4492709e1d58dd2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__c7e6600647351029a4492709e1d58dd2"}, "created_at": 1649080791.8427362, "compiled_sql": "\n    with a as (\n        \n    select\n        \n        count(*) as expression\n    from\n        postgres.dbt_expectations_integration_tests.data_test_factored\n    \n\n    ),\n    b as (\n        \n    select\n        \n        count(*) * 2 as expression\n    from\n        postgres.dbt_expectations_integration_tests.data_test\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_test_factored"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_10.d82948f3e6": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__064ba18602ba465cfaf04e075e758718\") }}", "test_metadata": {"name": "expect_table_row_count_to_be_between", "kwargs": {"min_value": 10, "model": "{{ get_where_subquery(ref('timeseries_data_grouped')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_grouped"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__064ba18602ba465cfaf04e075e758718", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_10"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_10.d82948f3e6", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__064ba18602ba465cfaf04e075e758718.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_10", "alias": "dbt_expectations_expect_table__064ba18602ba465cfaf04e075e758718", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_grouped"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__064ba18602ba465cfaf04e075e758718.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__064ba18602ba465cfaf04e075e758718"}, "created_at": 1649080791.8499331, "compiled_sql": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 10\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.timeseries_data_grouped\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_data_grouped"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_date_day__10.28ef2972b1": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__f4326907fdb0061ad0c20f6c75a5be5d\") }}", "test_metadata": {"name": "expect_table_row_count_to_be_between", "kwargs": {"min_value": 10, "group_by": ["date_day"], "model": "{{ get_where_subquery(ref('timeseries_data_grouped')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_grouped"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__f4326907fdb0061ad0c20f6c75a5be5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_date_day__10"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_date_day__10.28ef2972b1", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__f4326907fdb0061ad0c20f6c75a5be5d.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_date_day__10", "alias": "dbt_expectations_expect_table__f4326907fdb0061ad0c20f6c75a5be5d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_grouped"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__f4326907fdb0061ad0c20f6c75a5be5d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__f4326907fdb0061ad0c20f6c75a5be5d"}, "created_at": 1649080791.854389, "compiled_sql": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        date_day as col_1,\n        \n        \n    \n  \n( 1=1 and count(*) >= 10\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.timeseries_data_grouped\n    \n    group by\n    date_day\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_data_grouped"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_group_id__10000__True.1370954d9b": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__5f321fff5185e007b74c07f5d2bc74b1\") }}", "test_metadata": {"name": "expect_table_row_count_to_be_between", "kwargs": {"max_value": 10000, "group_by": ["group_id"], "strictly": true, "model": "{{ get_where_subquery(ref('timeseries_data_grouped')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_grouped"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__5f321fff5185e007b74c07f5d2bc74b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_group_id__10000__True"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_group_id__10000__True.1370954d9b", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_table__5f321fff5185e007b74c07f5d2bc74b1.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_group_id__10000__True", "alias": "dbt_expectations_expect_table__5f321fff5185e007b74c07f5d2bc74b1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_grouped"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_table__5f321fff5185e007b74c07f5d2bc74b1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__5f321fff5185e007b74c07f5d2bc74b1"}, "created_at": 1649080791.859491, "compiled_sql": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        group_id as col_1,\n        \n        \n    \n  \n( 1=1 and count(*) < 10000\n)\n as expression\n\n\n    from postgres.dbt_expectations_integration_tests.timeseries_data_grouped\n    \n    group by\n    group_id\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_data_grouped"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__1__date_day.75413a8781": {"raw_sql": "{{ dbt_expectations.test_expect_grouped_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_groupe_03905c2833f0ca1b26dbf87596f1c485\") }}", "test_metadata": {"name": "expect_grouped_row_values_to_have_recent_data", "kwargs": {"group_by": ["group_id"], "timestamp_column": "date_day", "datepart": "day", "interval": 1, "model": "{{ get_where_subquery(ref('timeseries_data_grouped')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_grouped"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_groupe_03905c2833f0ca1b26dbf87596f1c485", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__1__date_day"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__1__date_day.75413a8781", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_groupe_03905c2833f0ca1b26dbf87596f1c485.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__1__date_day", "alias": "dbt_expectations_expect_groupe_03905c2833f0ca1b26dbf87596f1c485", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_grouped"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_groupe_03905c2833f0ca1b26dbf87596f1c485.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_groupe_03905c2833f0ca1b26dbf87596f1c485"}, "created_at": 1649080791.866187, "compiled_sql": "\n\n \nwith latest_grouped_timestamps as (\n\n    select\n        group_id,\n        max(1) as join_key,\n        max(date_day) as latest_timestamp_column\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data_grouped\n    \n\n    group by 1\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        latest_timestamp_column < \n\n    cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone) + ((interval '1 day') * (-1))\n\n\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_data_grouped"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__row_value__1__date_day.53695446a8": {"raw_sql": "{{ dbt_expectations.test_expect_grouped_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_groupe_f632c52585d5c1752d72ba5b59c0fd8d\") }}", "test_metadata": {"name": "expect_grouped_row_values_to_have_recent_data", "kwargs": {"group_by": ["group_id", "row_value"], "timestamp_column": "date_day", "datepart": "day", "interval": 1, "model": "{{ get_where_subquery(ref('timeseries_data_grouped')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_grouped"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_groupe_f632c52585d5c1752d72ba5b59c0fd8d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__row_value__1__date_day"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__row_value__1__date_day.53695446a8", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_groupe_f632c52585d5c1752d72ba5b59c0fd8d.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__row_value__1__date_day", "alias": "dbt_expectations_expect_groupe_f632c52585d5c1752d72ba5b59c0fd8d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_grouped"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_groupe_f632c52585d5c1752d72ba5b59c0fd8d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_groupe_f632c52585d5c1752d72ba5b59c0fd8d"}, "created_at": 1649080791.8796391, "compiled_sql": "\n\n \nwith latest_grouped_timestamps as (\n\n    select\n        group_id,\n        row_value,\n        max(1) as join_key,\n        max(date_day) as latest_timestamp_column\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data_grouped\n    \n\n    group by 1,2\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        latest_timestamp_column < \n\n    cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone) + ((interval '1 day') * (-1))\n\n\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_data_grouped"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__1__group_id_4__date_day.eb518be9a8": {"raw_sql": "{{ dbt_expectations.test_expect_grouped_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_groupe_66f5377f4dbc0f8eb99e60e450aaa669\") }}", "test_metadata": {"name": "expect_grouped_row_values_to_have_recent_data", "kwargs": {"group_by": ["group_id"], "timestamp_column": "date_day", "datepart": "day", "interval": 1, "row_condition": "group_id = 4", "model": "{{ get_where_subquery(ref('timeseries_data_grouped')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.timeseries_data_grouped"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_groupe_66f5377f4dbc0f8eb99e60e450aaa669", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__1__group_id_4__date_day"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__1__group_id_4__date_day.eb518be9a8", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_groupe_66f5377f4dbc0f8eb99e60e450aaa669.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__1__group_id_4__date_day", "alias": "dbt_expectations_expect_groupe_66f5377f4dbc0f8eb99e60e450aaa669", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["timeseries_data_grouped"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_groupe_66f5377f4dbc0f8eb99e60e450aaa669.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_groupe_66f5377f4dbc0f8eb99e60e450aaa669"}, "created_at": 1649080791.886432, "compiled_sql": "\n\n \nwith latest_grouped_timestamps as (\n\n    select\n        group_id,\n        max(1) as join_key,\n        max(date_day) as latest_timestamp_column\n    from\n        postgres.dbt_expectations_integration_tests.timeseries_data_grouped\n    \n    where group_id = 4\n    \n\n    group by 1\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        latest_timestamp_column < \n\n    cast(\n    current_timestamp::timestamp without time zone\n at time zone 'UTC' at time zone 'America/Los_Angeles' as timestamp without time zone) + ((interval '1 day') * (-1))\n\n\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.timeseries_data_grouped"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_window_function_test_rolling_sum_increasing__idx__date_col__True.996e133dc9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_increasing(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6f21fa397105f33c57ef84f0ef082dae\") }}", "test_metadata": {"name": "expect_column_values_to_be_increasing", "kwargs": {"group_by": ["idx"], "strictly": true, "sort_column": "date_col", "column_name": "rolling_sum_increasing", "model": "{{ get_where_subquery(ref('window_function_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.window_function_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6f21fa397105f33c57ef84f0ef082dae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_increasing_window_function_test_rolling_sum_increasing__idx__date_col__True"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_window_function_test_rolling_sum_increasing__idx__date_col__True.996e133dc9", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_6f21fa397105f33c57ef84f0ef082dae.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_increasing_window_function_test_rolling_sum_increasing__idx__date_col__True", "alias": "dbt_expectations_expect_column_6f21fa397105f33c57ef84f0ef082dae", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["window_function_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_6f21fa397105f33c57ef84f0ef082dae.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6f21fa397105f33c57ef84f0ef082dae"}, "created_at": 1649080791.892419, "compiled_sql": "with all_values as (\n\n    select\n        date_col as sort_column,idx,\n        rolling_sum_increasing as value_field\n    from postgres.dbt_expectations_integration_tests.window_function_test\n    \n\n),\nadd_lag_values as (\n\n    select\n        sort_column,idx,\n        value_field,\n        lag(value_field) over(partition by idx order by sort_column) as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field > value_field_lag)\n\n)\nselect *\nfrom validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "rolling_sum_increasing", "file_key_name": "models.window_function_test"}, "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_decreasing_window_function_test_rolling_sum_decreasing__idx__date_col__True.1c67e8ae47": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_decreasing(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0181315364cadff36f627b8e7d628d6a\") }}", "test_metadata": {"name": "expect_column_values_to_be_decreasing", "kwargs": {"group_by": ["idx"], "strictly": true, "sort_column": "date_col", "column_name": "rolling_sum_decreasing", "model": "{{ get_where_subquery(ref('window_function_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_expectations_integration_tests.window_function_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0181315364cadff36f627b8e7d628d6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "dbt_test__audit", "fqn": ["dbt_expectations_integration_tests", "schema_tests", "dbt_expectations_expect_column_values_to_be_decreasing_window_function_test_rolling_sum_decreasing__idx__date_col__True"], "unique_id": "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_decreasing_window_function_test_rolling_sum_decreasing__idx__date_col__True.1c67e8ae47", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "dbt_expectations_expect_column_0181315364cadff36f627b8e7d628d6a.sql", "original_file_path": "models/schema_tests/schema.yml", "name": "dbt_expectations_expect_column_values_to_be_decreasing_window_function_test_rolling_sum_decreasing__idx__date_col__True", "alias": "dbt_expectations_expect_column_0181315364cadff36f627b8e7d628d6a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["window_function_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_expectations_integration_tests/models/schema_tests/schema.yml/dbt_expectations_expect_column_0181315364cadff36f627b8e7d628d6a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0181315364cadff36f627b8e7d628d6a"}, "created_at": 1649080791.897102, "compiled_sql": "\nwith all_values as (\n\n    select\n        date_col as sort_column,idx,\n        rolling_sum_decreasing as value_field\n    from postgres.dbt_expectations_integration_tests.window_function_test\n    \n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over(partition by idx order by sort_column) as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field < value_field_lag)\n\n)\nselect *\nfrom validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "rolling_sum_decreasing", "file_key_name": "models.window_function_test"}}, "sources": {}, "macros": {"macro.dbt_expectations_integration_tests.generate_schema_name": {"unique_id": "macro.dbt_expectations_integration_tests.generate_schema_name", "package_name": "dbt_expectations_integration_tests", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.626626}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.6312692}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.633055}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.644402}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.645737}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.64657}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.647396}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.648929}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.650013}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.6504729}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.6513999}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.652425}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.652632}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.653101}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.653375}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.6555789}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.656699}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.657287}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.658842}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.6608}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.6636522}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.6641788}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.664583}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.6649652}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.665375}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.666547}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.6673589}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.668295}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.669504}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.670196}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.677689}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.678129}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.678714}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.679086}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.679341}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.681209}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.6816351}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.6822221}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.684891}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.689898}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.6969879}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.697765}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.698215}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.698466}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.699014}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.701278}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.701785}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.702464}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.703605}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.7172632}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.721737}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.72279}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.723488}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.724397}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.725248}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.726984}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.7284968}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.7298508}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.7355258}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.7380438}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.738553}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.739681}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.740337}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.741718}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.743235}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.7544131}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.763956}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.7678}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.770487}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.772089}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.779983}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.781079}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.781495}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.782466}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.783395}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.7906392}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.791709}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.792214}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.795043}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.795938}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.796302}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.7967072}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.797285}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.803883}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8116639}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.813652}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.814163}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.815226}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8155441}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.816266}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.816725}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.816986}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8182158}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.818957}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.821915}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8229089}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.823413}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8246558}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.825352}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.825983}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.827543}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.828172}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8290591}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8296099}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.830299}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8316312}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.834542}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8357959}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.836436}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.839699}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8423948}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8444312}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.844936}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.845857}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.846263}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.846616}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8470201}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.848072}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.848375}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8487291}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.850212}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.853793}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.854559}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.855108}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.855843}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.856553}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.85692}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.857368}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.858239}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.858786}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.860317}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8608918}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.861344}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.862449}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.862776}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.863283}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.864218}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.86563}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.866001}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.867062}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.867556}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8681548}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.869208}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8718889}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8724558}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.872865}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8732119}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.873609}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.874149}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.874596}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.875675}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.87614}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8764958}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.879901}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.880248}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.880928}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.881335}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8820748}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.882642}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.884567}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.88534}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.887093}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.888295}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.888813}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.889456}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.890066}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.890771}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.890959}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.891127}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8919868}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.892361}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.893065}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.893455}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.895201}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.895373}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.89554}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.895704}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8958662}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.postgres__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.896221}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.89639}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8965561}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.89672}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8970711}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.897245}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.897415}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.897774}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8979468}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.898114}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.8984761}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.898649}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.898815}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.899423}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.899599}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.899765}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.901484}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.902271}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9025111}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.902743}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.903954}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.904325}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.904691}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.90505}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.905473}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.906162}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9063308}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.906495}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9073331}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9076428}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.907948}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.908258}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.909481}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.909787}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9101381}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9106581}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.915393}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.915762}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.916119}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.92096}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.921441}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.92242}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9227352}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.923033}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9233222}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.924103}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.924416}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.924712}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.92551}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.925827}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9261189}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.927743}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.927988}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.928231}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.929034}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.929389}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.929638}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.930547}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9308548}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9311638}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.931864}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.932102}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9339368}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.934201}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.93437}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9345338}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.934887}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9351869}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.935511}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9357572}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.936047}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.938622}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.939638}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.940755}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.941351}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.942334}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.942572}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.942802}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.943033}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.944468}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.945054}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.945385}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.946253}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.946653}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9476721}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.948046}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.948441}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9492931}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.949599}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.949899}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.952543}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.962634}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.963866}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.964559}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.965677}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.977864}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.978814}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9798558}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.980948}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.982516}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9833548}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.984916}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.985653}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.986016}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9867678}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9871948}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.987904}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.988281}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.98944}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9905732}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9910452}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.99198}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.99263}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.994164}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.995162}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.996133}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.996854}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9976692}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.998056}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080789.9993799}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.000502}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.002402}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0032482}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.004277}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.004648}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0054789}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.005867}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0071821}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.00859}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.009769}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.01051}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.011987}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0129468}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.013936}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0150568}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0165582}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.018497}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.019538}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.019905}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.021342}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.023251}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.02876}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.032116}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.033553}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0356019}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.036136}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.036939}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.037767}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.038532}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.039986}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.041856}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.043482}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0447848}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.045207}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0463622}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.047811}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.049663}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.051418}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0520508}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0537689}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' -%} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0564349}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.059691}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.065326}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0701141}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.076292}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.077235}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0779111}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.079215}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.081242}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.082196}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.082826}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.08368}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0851579}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.088245}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.088897}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.090427}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.091601}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.09357}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n{% if default is none %}\n    {% set default = [] %}\n{% endif %}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return(default) }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.09703}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.0992079}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.101942}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1030688}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.104554}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.105474}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1057658}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1059499}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.108027}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.10864}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.11004}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.112279}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.postgres__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.126173}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1316748}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1376598}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.139681}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1414242}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.142914}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1461911}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.147406}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.149163}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.149816}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.150385}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.151115}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1522539}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.postgres__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.153731}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.154187}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.154641}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.155091}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1555479}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.156339}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.156655}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1569679}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.157208}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.158092}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.159233}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.159567}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1602108}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.160885}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.162289}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.162637}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.162996}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.163307}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1636171}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.164671}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.165246}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.165855}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.166591}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.167148}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1677172}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1692002}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1696692}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.169985}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.170399}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.postgres__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.172758}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.173336}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.173911}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.174953}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.175828}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.176794}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1778471}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.17815}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.178456}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.179379}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.180012}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.180424}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.181077}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1841679}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.18535}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1863801}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.187026}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1882172}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.189148}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.190254}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.190722}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.191034}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.191342}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.192294}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.postgres__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.193383}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1938381}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.194637}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.195101}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.195557}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.196295}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.1973271}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.197738}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.19807}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.postgres__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2004201}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2011662}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.201819}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.202555}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2034}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.203809}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.204797}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.206025}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.206458}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.206774}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2070882}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.207415}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2085278}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2088451}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.209294}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.209745}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2104251}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2113569}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.postgres__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.21227}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2124438}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.212615}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.212783}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.postgres__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.213135}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.213304}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.21347}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2137332}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.postgres__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.215025}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.215453}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.215874}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.216214}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2165499}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2173069}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.217543}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2177742}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.218004}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.postgres__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.21924}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.219413}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.219581}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.219763}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.219928}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.220093}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.220682}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2218409}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.222301}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.223041}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2252412}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.226835}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.228961}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2295969}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.230939}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.239989}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2412229}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2422369}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.245245}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2459378}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.24617}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.247375}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.249496}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.250824}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.25217}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.254255}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.255741}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.257931}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.260076}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.262871}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.263603}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.264817}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2669282}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.268266}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.271439}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.27244}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.274882}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.278409}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max({{ timestamp_column }}) as latest_timestamp_column\n    from\n        {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        latest_timestamp_column < {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.dateadd", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.279566}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.282196}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.284087}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.284714}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.286714}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.2875671}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.29037}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.291359}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.294498}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.295587}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.296741}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.297676}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.299798}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.301708}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.304565}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.307414}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.308477}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.3091872}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.311158}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.313643}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.315904}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.3165572}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.317518}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.3185768}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.321064}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.322849}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.324664}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.326396}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.328473}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.330367}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.333336}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.335024}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.3375869}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.3390899}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.3407621}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.343252}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.344189}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.346179}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.3478389}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.349256}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.351315}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.3542988}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.364162}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.370431}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.371634}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    ),\n    {%- if take_diffs %}\n    grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.374115}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.3759391}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.377128}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.380634}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.383619}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set row_condition_ext %}\n\n{% if row_condition  %}\n    {{ row_condition }} and\n{% endif %}\n\n{% if ignore_row_if == \"all_values_are_missing\" %}\n    (\n        {% for column in columns -%}\n        {{ column }} is not null{% if not loop.last %} and {% endif %}\n        {%- endfor %}\n    )\n{% elif ignore_row_if == \"any_value_is_missing\" %}\n    (\n        {% for column in columns -%}\n        {{ column }} is not null{% if not loop.last %} or {% endif %}\n        {%- endfor %}\n    )\n{% endif %}\n{% endset %}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.389317}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.391213}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.392586}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.394133}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/claus/dev/calogica/dbt-expectations/integration_tests/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649080790.3971179}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Users/claus/.pyenv/versions/3.9.9/envs/dbt/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_expectations_integration_tests.data_test": [], "model.dbt_expectations_integration_tests.series_4": [], "model.dbt_expectations_integration_tests.timeseries_data_grouped": ["model.dbt_expectations_integration_tests.series_10", "model.dbt_expectations_integration_tests.series_4", "model.dbt_expectations_integration_tests.timeseries_base"], "model.dbt_expectations_integration_tests.timeseries_hourly": [], "model.dbt_expectations_integration_tests.timeseries_base": [], "model.dbt_expectations_integration_tests.timeseries_data": ["model.dbt_expectations_integration_tests.timeseries_base"], "model.dbt_expectations_integration_tests.window_function_test": [], "model.dbt_expectations_integration_tests.emails": [], "model.dbt_expectations_integration_tests.series_10": [], "model.dbt_expectations_integration_tests.timeseries_hourly_data_extended": ["model.dbt_expectations_integration_tests.series_10", "model.dbt_expectations_integration_tests.timeseries_hourly"], "model.dbt_expectations_integration_tests.data_test_factored": [], "model.dbt_expectations_integration_tests.timeseries_data_extended": ["model.dbt_expectations_integration_tests.series_10", "model.dbt_expectations_integration_tests.timeseries_base"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_regex_emails_email_address___.9de7a56999": ["model.dbt_expectations_integration_tests.emails"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_regex_emails_email_address___.ff3a15060f": ["model.dbt_expectations_integration_tests.emails"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_regex_list_emails_email_address______.959ffbd98d": ["model.dbt_expectations_integration_tests.emails"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_regex_list_emails_email_address______.8bac11c2c5": ["model.dbt_expectations_integration_tests.emails"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_like_pattern_emails_email_address___.08c0c874a1": ["model.dbt_expectations_integration_tests.emails"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_like_pattern_emails_email_address___.969be3889d": ["model.dbt_expectations_integration_tests.emails"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_like_pattern_list_emails_email_address______.004645a3ac": ["model.dbt_expectations_integration_tests.emails"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_like_pattern_list_emails_email_address______.31da73e0cd": ["model.dbt_expectations_integration_tests.emails"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_day__day__1.9222375acc": ["model.dbt_expectations_integration_tests.timeseries_data"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_day__date___dbt_expectations_type_timestamp_.79af0ea1f3": ["model.dbt_expectations_integration_tests.timeseries_data"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_timeseries_data_date_day__date_day.b349b0a845": ["model.dbt_expectations_integration_tests.timeseries_data"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__ref_timeseries_data_extended_.6fd6f4ea6b": ["model.dbt_expectations_integration_tests.timeseries_data", "model.dbt_expectations_integration_tests.timeseries_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_datetime__day__1.29c33143be": ["model.dbt_expectations_integration_tests.timeseries_data"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_datetime__date___dbt_expectations_type_datetime_.a431470019": ["model.dbt_expectations_integration_tests.timeseries_data"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_timestamp__day__1.300ccbdad1": ["model.dbt_expectations_integration_tests.timeseries_data"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_timestamp__date___dbt_expectations_type_timestamp_.4fc8b3eb42": ["model.dbt_expectations_integration_tests.timeseries_data"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_stdevs_timeseries_data_row_value__6.be239e407d": ["model.dbt_expectations_integration_tests.timeseries_data"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_data_row_value__date_day__6__True.86019a24d0": ["model.dbt_expectations_integration_tests.timeseries_data"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_timeseries_data_date_day__date_datetime__date_timestamp__row_value__row_value_log.fea981f1fa": ["model.dbt_expectations_integration_tests.timeseries_data"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__date_day__ref_timeseries_data_extended_.668a389f21": ["model.dbt_expectations_integration_tests.timeseries_data", "model.dbt_expectations_integration_tests.timeseries_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day.79cb16c1eb": ["model.dbt_expectations_integration_tests.timeseries_data"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_date_day__day.910ac3a171": ["model.dbt_expectations_integration_tests.timeseries_data"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_date_day__day__not_date_day_2021_10_19_.39ae519ce7": ["model.dbt_expectations_integration_tests.timeseries_data"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_extended_date_day__day__1.918ff17d7d": ["model.dbt_expectations_integration_tests.timeseries_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_of_type_timeseries_data_extended_date_day___dbt_expectations_type_datetime_.3377fc291f": ["model.dbt_expectations_integration_tests.timeseries_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_extended_date_day__date___dbt_expectations_type_datetime_.64544aba59": ["model.dbt_expectations_integration_tests.timeseries_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_timeseries_data_extended_row_value__date_day_dbt_date_yesterday___10.633f73d315": ["model.dbt_expectations_integration_tests.timeseries_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_be_greater_than_timeseries_data_extended_row_value__date_day_dbt_date_yesterday___1.ab45a07e5c": ["model.dbt_expectations_integration_tests.timeseries_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_data_extended_row_value_log__cast_date_day_as_dbt_expectations_type_datetime___6__False.91749cfd51": ["model.dbt_expectations_integration_tests.timeseries_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_timeseries_data_extended_date_day__row_value__row_value_log.c4fbe0bb2c": ["model.dbt_expectations_integration_tests.timeseries_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_extended_date_day__day.fef2d1f342": ["model.dbt_expectations_integration_tests.timeseries_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_extended_date_day__day__7.e436a78560": ["model.dbt_expectations_integration_tests.timeseries_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_hourly_data_extended_date_hour__hour__24.a182297cd8": ["model.dbt_expectations_integration_tests.timeseries_hourly_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_of_type_timeseries_hourly_data_extended_date_hour___dbt_expectations_type_datetime_.fa9ac6d2a4": ["model.dbt_expectations_integration_tests.timeseries_hourly_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_hourly_data_extended_date_hour___dbt_expectations_type_datetime_.e2af5fe244": ["model.dbt_expectations_integration_tests.timeseries_hourly_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_hourly_data_extended_row_value_log__cast_date_hour_as_dbt_expectations_type_datetime___hour__6__False__12__48.c200505cc1": ["model.dbt_expectations_integration_tests.timeseries_hourly_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_hourly_data_extended_date_hour__hour.5afac62404": ["model.dbt_expectations_integration_tests.timeseries_hourly_data_extended"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_1__idx.fe00acd806": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_unique_data_test_idx.1fedbd4c8c": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_data_test_idx__idx.f1baf74a63": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_col_numeric_a.05ed4c08ef": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_3__col_numeric_a.707ebd64f9": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_null_data_test_col_numeric_a.1c5c036a67": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_between_data_test_col_numeric_a__1__0.dd0c29c89d": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_between_data_test_col_numeric_a__0.38e10ae5de": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_sum_to_be_between_data_test_col_numeric_a__3__1.768d8a3df1": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_min_to_be_between_data_test_col_numeric_a__0__0.0b9263ab44": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_max_to_be_between_data_test_col_numeric_a__1__1.da51d2d9cb": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_mean_to_be_between_data_test_col_numeric_a__1_5__0.885aa2d309": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_unique_value_count_to_be_between_data_test_col_numeric_a__3__3.29365f2765": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_proportion_of_unique_values_to_be_between_data_test_col_numeric_a__0_75__0.50b672f9f5": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_stdev_to_be_between_data_test_col_numeric_a__2__0.6aea0941f3": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_stdev_to_be_between_data_test_col_numeric_a__0__True.0828889e83": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_most_common_value_to_be_in_set_data_test_col_numeric_a__1__0_5.0c353bf758": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_data_test_col_numeric_a__col_numeric_a__False.275c036446": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_set_data_test_col_string_a__True__a__b__c.0d9c524932": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_in_set_data_test_col_string_a__True__2__3.bba7663cef": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_equal_set_data_test_col_string_a__True__a__b__c__c.351d3e42e2": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_be_in_set_data_test_col_string_a__True__a__b__c__d.ba496b564d": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_contain_set_data_test_col_string_a__True__a__b.cb3359e163": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_equal_data_test_col_string_a__1.914eeb47db": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_have_consistent_casing_data_test_col_string_a.97aaa47da3": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_have_consistent_casing_data_test_col_string_a__True.dbf8671a4f": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_in_set_data_test_col_string_b__True__a__c.430e7a2045": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__4__1.7124d69fa8": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__1.11ec77adb3": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__4.c9921ddc5a": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_null_data_test_col_null.0be3aa326a": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_compound_columns_to_be_unique_data_test_date_col__col_string_b__any_value_is_missing.6809061372": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_data_test_4.0893914b47": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_4__1.68b3ca52d7": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_1.2707fd03e7": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_4.740d584f1d": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_other_table_data_test_ref_data_test___1_1__1_1.bb1a037ebc": ["model.dbt_expectations_integration_tests.data_test", "model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_equal_data_test_7.552fe2a555": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_10__1.31fd1ecbff": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_1.81327d9e76": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_10.53e3f2be23": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_contain_set_data_test_col_numeric_b__col_string_a.428ef19067": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_set_data_test_idx__date_col__col_numeric_a__col_numeric_b__col_string_a__col_string_b__col_null.43007c4dca": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_data_test_idx__date_col__col_numeric_a__col_numeric_b__col_string_a__col_string_b__col_null.847d680085": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_equal_other_table_data_test_ref_data_test_.47d89a52cb": ["model.dbt_expectations_integration_tests.data_test", "model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_not_contain_set_data_test_col_numeric_c__col_string_d.d79c96d480": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expression_is_true_data_test__col_numeric_a_col_numeric_b_1_.72e60a34af": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_ref_data_test___sum_col_numeric_a___idx.b487d295fb": ["model.dbt_expectations_integration_tests.data_test", "model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_sum_col_numeric_a_5___ref_data_test___sum_col_numeric_a___idx__0_5.ce68b2893f": ["model.dbt_expectations_integration_tests.data_test", "model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_to_be_in_set_data_test_col_numeric_a__col_numeric_b___0_1____1_0____0_5_0_5____0_5_0_5_.fcd2f00790": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_sum_col_numeric_b___ref_data_test___sum_col_numeric_a_.674a29f4ac": ["model.dbt_expectations_integration_tests.data_test", "model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_data_test_col_numeric_a_10__col_numeric_a.95a5cc1fac": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_data_test_col_numeric_a__col_numeric_a__True.996ee156f4": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_to_be_equal_data_test_col_numeric_a__col_numeric_a.6237de7ec0": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_select_column_values_to_be_unique_within_record_data_test_col_string_a__col_string_b__any_value_is_missing.4673d37284": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_multicolumn_sum_to_equal_data_test_col_numeric_a__col_numeric_b__4.491d71e071": ["model.dbt_expectations_integration_tests.data_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_other_table_times_factor_data_test_factored_ref_data_test___2.297ec8375e": ["model.dbt_expectations_integration_tests.data_test", "model.dbt_expectations_integration_tests.data_test_factored"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_10.d82948f3e6": ["model.dbt_expectations_integration_tests.timeseries_data_grouped"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_date_day__10.28ef2972b1": ["model.dbt_expectations_integration_tests.timeseries_data_grouped"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_group_id__10000__True.1370954d9b": ["model.dbt_expectations_integration_tests.timeseries_data_grouped"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__1__date_day.75413a8781": ["model.dbt_expectations_integration_tests.timeseries_data_grouped"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__row_value__1__date_day.53695446a8": ["model.dbt_expectations_integration_tests.timeseries_data_grouped"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__1__group_id_4__date_day.eb518be9a8": ["model.dbt_expectations_integration_tests.timeseries_data_grouped"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_window_function_test_rolling_sum_increasing__idx__date_col__True.996e133dc9": ["model.dbt_expectations_integration_tests.window_function_test"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_decreasing_window_function_test_rolling_sum_decreasing__idx__date_col__True.1c67e8ae47": ["model.dbt_expectations_integration_tests.window_function_test"]}, "child_map": {"model.dbt_expectations_integration_tests.data_test": ["test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_ref_data_test___sum_col_numeric_a___idx.b487d295fb", "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_ref_data_test___sum_col_numeric_a___idx.b487d295fb", "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_sum_col_numeric_a_5___ref_data_test___sum_col_numeric_a___idx__0_5.ce68b2893f", "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_sum_col_numeric_a_5___ref_data_test___sum_col_numeric_a___idx__0_5.ce68b2893f", "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_sum_col_numeric_b___ref_data_test___sum_col_numeric_a_.674a29f4ac", "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_sum_col_numeric_b___ref_data_test___sum_col_numeric_a_.674a29f4ac", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_be_in_set_data_test_col_string_a__True__a__b__c__d.ba496b564d", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_contain_set_data_test_col_string_a__True__a__b.cb3359e163", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_equal_set_data_test_col_string_a__True__a__b__c__c.351d3e42e2", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_max_to_be_between_data_test_col_numeric_a__1__1.da51d2d9cb", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_mean_to_be_between_data_test_col_numeric_a__1_5__0.885aa2d309", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_min_to_be_between_data_test_col_numeric_a__0__0.0b9263ab44", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_most_common_value_to_be_in_set_data_test_col_numeric_a__1__0_5.0c353bf758", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_data_test_col_numeric_a_10__col_numeric_a.95a5cc1fac", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_data_test_col_numeric_a__col_numeric_a__True.996ee156f4", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_to_be_equal_data_test_col_numeric_a__col_numeric_a.6237de7ec0", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_to_be_in_set_data_test_col_numeric_a__col_numeric_b___0_1____1_0____0_5_0_5____0_5_0_5_.fcd2f00790", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_proportion_of_unique_values_to_be_between_data_test_col_numeric_a__0_75__0.50b672f9f5", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_stdev_to_be_between_data_test_col_numeric_a__0__True.0828889e83", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_stdev_to_be_between_data_test_col_numeric_a__2__0.6aea0941f3", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_sum_to_be_between_data_test_col_numeric_a__3__1.768d8a3df1", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_1__idx.fe00acd806", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_3__col_numeric_a.707ebd64f9", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_col_numeric_a.05ed4c08ef", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_unique_value_count_to_be_between_data_test_col_numeric_a__3__3.29365f2765", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__1.11ec77adb3", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__4.c9921ddc5a", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__4__1.7124d69fa8", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_equal_data_test_col_string_a__1.914eeb47db", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_between_data_test_col_numeric_a__0.38e10ae5de", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_between_data_test_col_numeric_a__1__0.dd0c29c89d", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_set_data_test_col_string_a__True__a__b__c.0d9c524932", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_data_test_col_numeric_a__col_numeric_a__False.275c036446", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_data_test_idx__idx.f1baf74a63", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_null_data_test_col_null.0be3aa326a", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_unique_data_test_idx.1fedbd4c8c", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_have_consistent_casing_data_test_col_string_a.97aaa47da3", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_have_consistent_casing_data_test_col_string_a__True.dbf8671a4f", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_in_set_data_test_col_string_a__True__2__3.bba7663cef", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_in_set_data_test_col_string_b__True__a__c.430e7a2045", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_null_data_test_col_numeric_a.1c5c036a67", "test.dbt_expectations_integration_tests.dbt_expectations_expect_compound_columns_to_be_unique_data_test_date_col__col_string_b__any_value_is_missing.6809061372", "test.dbt_expectations_integration_tests.dbt_expectations_expect_multicolumn_sum_to_equal_data_test_col_numeric_a__col_numeric_b__4.491d71e071", "test.dbt_expectations_integration_tests.dbt_expectations_expect_select_column_values_to_be_unique_within_record_data_test_col_string_a__col_string_b__any_value_is_missing.4673d37284", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_1.81327d9e76", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_10.53e3f2be23", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_10__1.31fd1ecbff", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_equal_data_test_7.552fe2a555", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_equal_other_table_data_test_ref_data_test_.47d89a52cb", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_equal_other_table_data_test_ref_data_test_.47d89a52cb", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_contain_set_data_test_col_numeric_b__col_string_a.428ef19067", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_data_test_idx__date_col__col_numeric_a__col_numeric_b__col_string_a__col_string_b__col_null.847d680085", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_set_data_test_idx__date_col__col_numeric_a__col_numeric_b__col_string_a__col_string_b__col_null.43007c4dca", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_not_contain_set_data_test_col_numeric_c__col_string_d.d79c96d480", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_1.2707fd03e7", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_4.740d584f1d", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_4__1.68b3ca52d7", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_data_test_4.0893914b47", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_other_table_data_test_ref_data_test___1_1__1_1.bb1a037ebc", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_other_table_data_test_ref_data_test___1_1__1_1.bb1a037ebc", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_other_table_times_factor_data_test_factored_ref_data_test___2.297ec8375e", "test.dbt_expectations_integration_tests.dbt_expectations_expression_is_true_data_test__col_numeric_a_col_numeric_b_1_.72e60a34af"], "model.dbt_expectations_integration_tests.series_4": ["model.dbt_expectations_integration_tests.timeseries_data_grouped"], "model.dbt_expectations_integration_tests.timeseries_data_grouped": ["test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__1__date_day.75413a8781", "test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__1__group_id_4__date_day.eb518be9a8", "test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__row_value__1__date_day.53695446a8", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_10.d82948f3e6", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_date_day__10.28ef2972b1", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_group_id__10000__True.1370954d9b"], "model.dbt_expectations_integration_tests.timeseries_hourly": ["model.dbt_expectations_integration_tests.timeseries_hourly_data_extended"], "model.dbt_expectations_integration_tests.timeseries_base": ["model.dbt_expectations_integration_tests.timeseries_data", "model.dbt_expectations_integration_tests.timeseries_data_extended", "model.dbt_expectations_integration_tests.timeseries_data_grouped"], "model.dbt_expectations_integration_tests.timeseries_data": ["test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day.79cb16c1eb", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__date_day__ref_timeseries_data_extended_.668a389f21", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__ref_timeseries_data_extended_.6fd6f4ea6b", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_datetime__date___dbt_expectations_type_datetime_.a431470019", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_day__date___dbt_expectations_type_timestamp_.79af0ea1f3", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_timestamp__date___dbt_expectations_type_timestamp_.4fc8b3eb42", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_timeseries_data_date_day__date_day.b349b0a845", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_data_row_value__date_day__6__True.86019a24d0", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_stdevs_timeseries_data_row_value__6.be239e407d", "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_date_day__day.910ac3a171", "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_date_day__day__not_date_day_2021_10_19_.39ae519ce7", "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_datetime__day__1.29c33143be", "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_day__day__1.9222375acc", "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_timestamp__day__1.300ccbdad1", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_timeseries_data_date_day__date_datetime__date_timestamp__row_value__row_value_log.fea981f1fa"], "model.dbt_expectations_integration_tests.window_function_test": ["test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_decreasing_window_function_test_rolling_sum_decreasing__idx__date_col__True.1c67e8ae47", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_window_function_test_rolling_sum_increasing__idx__date_col__True.996e133dc9"], "model.dbt_expectations_integration_tests.emails": ["test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_like_pattern_emails_email_address___.08c0c874a1", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_like_pattern_list_emails_email_address______.004645a3ac", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_regex_emails_email_address___.9de7a56999", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_regex_list_emails_email_address______.959ffbd98d", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_like_pattern_emails_email_address___.969be3889d", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_like_pattern_list_emails_email_address______.31da73e0cd", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_regex_emails_email_address___.ff3a15060f", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_regex_list_emails_email_address______.8bac11c2c5"], "model.dbt_expectations_integration_tests.series_10": ["model.dbt_expectations_integration_tests.timeseries_data_extended", "model.dbt_expectations_integration_tests.timeseries_data_grouped", "model.dbt_expectations_integration_tests.timeseries_hourly_data_extended"], "model.dbt_expectations_integration_tests.timeseries_hourly_data_extended": ["test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_hourly_data_extended_date_hour___dbt_expectations_type_datetime_.e2af5fe244", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_of_type_timeseries_hourly_data_extended_date_hour___dbt_expectations_type_datetime_.fa9ac6d2a4", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_hourly_data_extended_row_value_log__cast_date_hour_as_dbt_expectations_type_datetime___hour__6__False__12__48.c200505cc1", "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_hourly_data_extended_date_hour__hour.5afac62404", "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_hourly_data_extended_date_hour__hour__24.a182297cd8"], "model.dbt_expectations_integration_tests.data_test_factored": ["test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_other_table_times_factor_data_test_factored_ref_data_test___2.297ec8375e"], "model.dbt_expectations_integration_tests.timeseries_data_extended": ["test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_be_greater_than_timeseries_data_extended_row_value__date_day_dbt_date_yesterday___1.ab45a07e5c", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__date_day__ref_timeseries_data_extended_.668a389f21", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__ref_timeseries_data_extended_.6fd6f4ea6b", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_timeseries_data_extended_row_value__date_day_dbt_date_yesterday___10.633f73d315", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_extended_date_day__date___dbt_expectations_type_datetime_.64544aba59", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_of_type_timeseries_data_extended_date_day___dbt_expectations_type_datetime_.3377fc291f", "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_data_extended_row_value_log__cast_date_day_as_dbt_expectations_type_datetime___6__False.91749cfd51", "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_extended_date_day__day.fef2d1f342", "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_extended_date_day__day__7.e436a78560", "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_extended_date_day__day__1.918ff17d7d", "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_timeseries_data_extended_date_day__row_value__row_value_log.c4fbe0bb2c"], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_regex_emails_email_address___.9de7a56999": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_regex_emails_email_address___.ff3a15060f": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_regex_list_emails_email_address______.959ffbd98d": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_regex_list_emails_email_address______.8bac11c2c5": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_like_pattern_emails_email_address___.08c0c874a1": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_like_pattern_emails_email_address___.969be3889d": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_match_like_pattern_list_emails_email_address______.004645a3ac": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_match_like_pattern_list_emails_email_address______.31da73e0cd": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_day__day__1.9222375acc": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_day__date___dbt_expectations_type_timestamp_.79af0ea1f3": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_timeseries_data_date_day__date_day.b349b0a845": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__ref_timeseries_data_extended_.6fd6f4ea6b": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_datetime__day__1.29c33143be": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_datetime__date___dbt_expectations_type_datetime_.a431470019": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_date_timestamp__day__1.300ccbdad1": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_date_timestamp__date___dbt_expectations_type_timestamp_.4fc8b3eb42": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_stdevs_timeseries_data_row_value__6.be239e407d": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_data_row_value__date_day__6__True.86019a24d0": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_timeseries_data_date_day__date_datetime__date_timestamp__row_value__row_value_log.fea981f1fa": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day__date_day__ref_timeseries_data_extended_.668a389f21": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_other_table_timeseries_data_date_day.79cb16c1eb": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_date_day__day.910ac3a171": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_date_day__day__not_date_day_2021_10_19_.39ae519ce7": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_data_extended_date_day__day__1.918ff17d7d": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_of_type_timeseries_data_extended_date_day___dbt_expectations_type_datetime_.3377fc291f": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_data_extended_date_day__date___dbt_expectations_type_datetime_.64544aba59": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_equal_timeseries_data_extended_row_value__date_day_dbt_date_yesterday___10.633f73d315": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_count_to_be_greater_than_timeseries_data_extended_row_value__date_day_dbt_date_yesterday___1.ab45a07e5c": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_data_extended_row_value_log__cast_date_day_as_dbt_expectations_type_datetime___6__False.91749cfd51": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_timeseries_data_extended_date_day__row_value__row_value_log.c4fbe0bb2c": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_extended_date_day__day.fef2d1f342": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_data_extended_date_day__day__7.e436a78560": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_recent_data_timeseries_hourly_data_extended_date_hour__hour__24.a182297cd8": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_of_type_timeseries_hourly_data_extended_date_hour___dbt_expectations_type_datetime_.fa9ac6d2a4": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_type_list_timeseries_hourly_data_extended_date_hour___dbt_expectations_type_datetime_.e2af5fe244": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_within_n_moving_stdevs_timeseries_hourly_data_extended_row_value_log__cast_date_hour_as_dbt_expectations_type_datetime___hour__6__False__12__48.c200505cc1": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_timeseries_hourly_data_extended_date_hour__hour.5afac62404": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_1__idx.fe00acd806": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_unique_data_test_idx.1fedbd4c8c": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_data_test_idx__idx.f1baf74a63": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_col_numeric_a.05ed4c08ef": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_to_exist_data_test_3__col_numeric_a.707ebd64f9": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_null_data_test_col_numeric_a.1c5c036a67": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_between_data_test_col_numeric_a__1__0.dd0c29c89d": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_between_data_test_col_numeric_a__0.38e10ae5de": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_sum_to_be_between_data_test_col_numeric_a__3__1.768d8a3df1": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_min_to_be_between_data_test_col_numeric_a__0__0.0b9263ab44": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_max_to_be_between_data_test_col_numeric_a__1__1.da51d2d9cb": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_mean_to_be_between_data_test_col_numeric_a__1_5__0.885aa2d309": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_unique_value_count_to_be_between_data_test_col_numeric_a__3__3.29365f2765": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_proportion_of_unique_values_to_be_between_data_test_col_numeric_a__0_75__0.50b672f9f5": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_stdev_to_be_between_data_test_col_numeric_a__2__0.6aea0941f3": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_stdev_to_be_between_data_test_col_numeric_a__0__True.0828889e83": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_most_common_value_to_be_in_set_data_test_col_numeric_a__1__0_5.0c353bf758": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_data_test_col_numeric_a__col_numeric_a__False.275c036446": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_in_set_data_test_col_string_a__True__a__b__c.0d9c524932": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_in_set_data_test_col_string_a__True__2__3.bba7663cef": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_equal_set_data_test_col_string_a__True__a__b__c__c.351d3e42e2": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_be_in_set_data_test_col_string_a__True__a__b__c__d.ba496b564d": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_distinct_values_to_contain_set_data_test_col_string_a__True__a__b.cb3359e163": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_equal_data_test_col_string_a__1.914eeb47db": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_have_consistent_casing_data_test_col_string_a.97aaa47da3": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_have_consistent_casing_data_test_col_string_a__True.dbf8671a4f": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_not_be_in_set_data_test_col_string_b__True__a__c.430e7a2045": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__4__1.7124d69fa8": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__1.11ec77adb3": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_value_lengths_to_be_between_data_test_col_string_b__4.c9921ddc5a": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_null_data_test_col_null.0be3aa326a": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_compound_columns_to_be_unique_data_test_date_col__col_string_b__any_value_is_missing.6809061372": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_data_test_4.0893914b47": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_4__1.68b3ca52d7": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_1.2707fd03e7": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_data_test_4.740d584f1d": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_other_table_data_test_ref_data_test___1_1__1_1.bb1a037ebc": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_equal_data_test_7.552fe2a555": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_10__1.31fd1ecbff": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_1.81327d9e76": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_be_between_data_test_10.53e3f2be23": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_contain_set_data_test_col_numeric_b__col_string_a.428ef19067": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_set_data_test_idx__date_col__col_numeric_a__col_numeric_b__col_string_a__col_string_b__col_null.43007c4dca": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_match_ordered_list_data_test_idx__date_col__col_numeric_a__col_numeric_b__col_string_a__col_string_b__col_null.847d680085": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_column_count_to_equal_other_table_data_test_ref_data_test_.47d89a52cb": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_columns_to_not_contain_set_data_test_col_numeric_c__col_string_d.d79c96d480": [], "test.dbt_expectations_integration_tests.dbt_expectations_expression_is_true_data_test__col_numeric_a_col_numeric_b_1_.72e60a34af": [], "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_ref_data_test___sum_col_numeric_a___idx.b487d295fb": [], "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_sum_col_numeric_a_5___ref_data_test___sum_col_numeric_a___idx__0_5.ce68b2893f": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_to_be_in_set_data_test_col_numeric_a__col_numeric_b___0_1____1_0____0_5_0_5____0_5_0_5_.fcd2f00790": [], "test.dbt_expectations_integration_tests.dbt_expectations_equal_expression_data_test_sum_col_numeric_b___ref_data_test___sum_col_numeric_a_.674a29f4ac": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_data_test_col_numeric_a_10__col_numeric_a.95a5cc1fac": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_data_test_col_numeric_a__col_numeric_a__True.996ee156f4": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_pair_values_to_be_equal_data_test_col_numeric_a__col_numeric_a.6237de7ec0": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_select_column_values_to_be_unique_within_record_data_test_col_string_a__col_string_b__any_value_is_missing.4673d37284": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_multicolumn_sum_to_equal_data_test_col_numeric_a__col_numeric_b__4.491d71e071": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_equal_other_table_times_factor_data_test_factored_ref_data_test___2.297ec8375e": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_10.d82948f3e6": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_date_day__10.28ef2972b1": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_table_row_count_to_be_between_timeseries_data_grouped_group_id__10000__True.1370954d9b": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__1__date_day.75413a8781": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__row_value__1__date_day.53695446a8": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_grouped_row_values_to_have_recent_data_timeseries_data_grouped_day__group_id__1__group_id_4__date_day.eb518be9a8": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_increasing_window_function_test_rolling_sum_increasing__idx__date_col__True.996e133dc9": [], "test.dbt_expectations_integration_tests.dbt_expectations_expect_column_values_to_be_decreasing_window_function_test_rolling_sum_decreasing__idx__date_col__True.1c67e8ae47": []}}